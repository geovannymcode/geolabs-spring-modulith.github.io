{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Workshop: CQRS con Spring Modulith desde Cero","text":""},{"location":"#bienvenido-al-taller-practico","title":"Bienvenido al Taller Pr\u00e1ctico","text":"<p>Duraci\u00f3n: 1.5 horas Nivel: Intermedio Prerequisitos: Conocimientos b\u00e1sicos de Spring Boot y Java</p>"},{"location":"#que-es-spring-modulith","title":"\u00bfQu\u00e9 es Spring Modulith?","text":"<p>Spring Modulith es una soluci\u00f3n arquitect\u00f3nica que te permite construir monolitos modulares - aplicaciones que combinan la simplicidad del monolito con la organizaci\u00f3n clara de los microservicios.</p>"},{"location":"#el-problema-que-resuelve","title":"El Problema que Resuelve","text":"<p>\u00bfTe ha pasado esto?</p> <pre><code>// Al inicio: todo limpio y organizado\n@RestController \npublic class ProductController {\n    private final ProductService productService;\n}\n\n// Despu\u00e9s de 6 meses: bajo presi\u00f3n de entrega\n@RestController\npublic class ProductController {\n    @Autowired private ProductService productService;\n    @Autowired private UserRepository userRepository;    // \u00bfPor qu\u00e9 est\u00e1 aqu\u00ed?\n    @Autowired private OrderService orderService;       // Esto no deber\u00eda estar\n    @Autowired private EmailService emailService;       // Tampoco esto\n}\n</code></pre> <p>\u00bfQu\u00e9 pas\u00f3? Bajo presi\u00f3n, los desarrolladores toman atajos y el c\u00f3digo se vuelve un \"gran bola de barro\".</p>"},{"location":"#la-solucion-monolitos-modulares","title":"La Soluci\u00f3n: Monolitos Modulares","text":"<p>Spring Modulith te da reglas arquitect\u00f3nicas autom\u00e1ticas que previenen este deterioro:</p> <ul> <li>M\u00f3dulos independientes con l\u00edmites claros</li> <li>Testing autom\u00e1tico de la arquitectura </li> <li>Comunicaci\u00f3n controlada entre m\u00f3dulos</li> <li>Documentaci\u00f3n autom\u00e1tica siempre actualizada</li> </ul>"},{"location":"#que-construiremos","title":"\u00bfQu\u00e9 Construiremos?","text":"<p>Durante el taller implementaremos una tienda online con arquitectura CQRS y m\u00f3dulos independientes:</p> <pre><code>\ud83d\udce6 store-cqrs/\n\u251c\u2500\u2500 \ud83d\udecd\ufe0f products/          # Cat\u00e1logo de productos\n\u2502   \u251c\u2500\u2500 command/          # Operaciones de escritura\n\u2502   \u251c\u2500\u2500 query/            # Operaciones de lectura  \n\u2502   \u2514\u2500\u2500 events/           # Comunicaci\u00f3n entre m\u00f3dulos\n\u251c\u2500\u2500 \ud83d\udd27 common/            # Utilidades compartidas\n\u2514\u2500\u2500 \ud83d\udccb config/            # Configuraci\u00f3n global\n</code></pre>"},{"location":"#funcionalidades-implementadas","title":"Funcionalidades Implementadas","text":"<p>Gesti\u00f3n de Productos:</p> <ul> <li>Crear y actualizar productos</li> <li>Agregar reviews y calificaciones</li> <li>Consultas optimizadas por categor\u00eda y rating</li> </ul> <p>Arquitectura CQRS:</p> <ul> <li>Lado Command: Modelos para escritura (consistencia)</li> <li>Lado Query: Modelos para lectura (performance)</li> <li>Sincronizaci\u00f3n autom\u00e1tica via eventos</li> </ul> <p>Observabilidad:</p> <ul> <li>Trazabilidad entre m\u00f3dulos con Zipkin</li> <li>M\u00e9tricas y health checks</li> <li>Eventos externos con Kafka</li> </ul>"},{"location":"#estructura-del-workshop","title":"Estructura del Workshop","text":""},{"location":"#parte-1-fundamentos-30-min","title":"Parte 1: Fundamentos (30 min)","text":"<ul> <li>\u00bfPor qu\u00e9 Spring Modulith?</li> <li>Configuraci\u00f3n del proyecto</li> <li>Primer m\u00f3dulo funcional</li> <li>Verificaci\u00f3n de reglas arquitect\u00f3nicas</li> </ul>"},{"location":"#parte-2-cqrs-en-accion-45-min","title":"Parte 2: CQRS en Acci\u00f3n (45 min)","text":"<ul> <li>Implementaci\u00f3n lado Command</li> <li>Implementaci\u00f3n lado Query</li> <li>Eventos entre m\u00f3dulos</li> <li>Testing independiente</li> </ul>"},{"location":"#parte-3-produccion-15-min","title":"Parte 3: Producci\u00f3n (15 min)","text":"<ul> <li>Observabilidad con Zipkin</li> <li>Automatizaci\u00f3n con Taskfile</li> <li>Deployment con Docker</li> <li>Demo final completo</li> </ul>"},{"location":"#pre-requisitos-tecnicos","title":"Pre-requisitos T\u00e9cnicos","text":""},{"location":"#software-necesario","title":"Software Necesario","text":"<ul> <li>Java 21+</li> <li>Maven 3.8+</li> <li>Docker Desktop</li> <li>IDE (IntelliJ IDEA, VS Code, Eclipse)</li> <li>Git</li> </ul>"},{"location":"#verificacion-del-entorno","title":"Verificaci\u00f3n del Entorno","text":"<pre><code># Verificar instalaciones\njava -version    # Debe mostrar Java 21+\nmvn -version     # Debe mostrar Maven 3.8+\ndocker --version # Docker funcionando\n</code></pre>"},{"location":"#opcional-taskfile","title":"Opcional: Taskfile","text":"<pre><code># Instalar Taskfile para automatizaci\u00f3n\n# macOS: brew install go-task/tap/go-task\n# Windows: choco install go-task\n# Linux: sh -c \"$(curl -ssL https://taskfile.dev/install.sh)\"\n</code></pre>"},{"location":"#que-aprenderas","title":"\u00bfQu\u00e9 Aprender\u00e1s?","text":"<p>Al finalizar el workshop podr\u00e1s:</p>"},{"location":"#arquitectura","title":"\ud83c\udfd7\ufe0f Arquitectura","text":"<ul> <li>Dise\u00f1ar monolitos modulares</li> <li>Implementar CQRS correctamente</li> <li>Definir l\u00edmites de m\u00f3dulos claros</li> <li>Prevenir el \"big ball of mud\"</li> </ul>"},{"location":"#herramientas","title":"\ud83d\udd27 Herramientas","text":"<ul> <li>Spring Modulith para modularidad</li> <li>Zipkin para trazabilidad</li> <li>Kafka para eventos externos</li> <li>Docker para deployment</li> </ul>"},{"location":"#buenas-practicas","title":"\ud83e\uddea Buenas Pr\u00e1cticas","text":"<ul> <li>Testing independiente de m\u00f3dulos</li> <li>Automatizaci\u00f3n con Taskfile</li> <li>Documentaci\u00f3n autom\u00e1tica</li> <li>Observabilidad integrada</li> </ul>"},{"location":"#productividad","title":"\ud83d\ude80 Productividad","text":"<ul> <li>Setup de proyecto en minutos</li> <li>Pipeline de desarrollo completo</li> <li>Demo funcional desde el primer d\u00eda</li> </ul>"},{"location":"#enfoque-del-taller","title":"Enfoque del Taller","text":""},{"location":"#aprendizaje-practico","title":"Aprendizaje Pr\u00e1ctico","text":"<ul> <li>Menos teor\u00eda, m\u00e1s c\u00f3digo</li> <li>Cada concepto se implementa inmediatamente</li> <li>Proyecto funcional al final</li> </ul>"},{"location":"#explicaciones-claras","title":"Explicaciones Claras","text":"<ul> <li>\u00bfQu\u00e9 es? - Definiciones simples</li> <li>\u00bfPor qu\u00e9? - Problemas que resuelve</li> <li>\u00bfC\u00f3mo? - Implementaci\u00f3n paso a paso</li> <li>\u00bfCu\u00e1ndo? - Contexto de uso apropiado</li> </ul>"},{"location":"#herramientas-modernas","title":"Herramientas Modernas","text":"<ul> <li>Taskfile en lugar de scripts bash</li> <li>TestContainers para testing real</li> <li>Docker Compose para entorno completo</li> </ul>"},{"location":"#resultados-esperados","title":"Resultados Esperados","text":""},{"location":"#al-final-del-workshop-tendras","title":"Al Final del Workshop Tendr\u00e1s:","text":"<p>\u2705 Aplicaci\u00f3n Funcional <pre><code>task demo  # Inicia todo el entorno autom\u00e1ticamente\n</code></pre></p> <p>\u2705 APIs Funcionando</p> <ul> <li>Crear productos: <code>POST /api/products</code></li> <li>Ver cat\u00e1logo: <code>GET /api/products</code></li> <li>Agregar reviews: <code>POST /api/products/{id}/reviews</code></li> <li>Productos por rating: <code>GET /api/products/by-rating</code></li> </ul> <p>\u2705 Observabilidad Completa</p> <ul> <li>Aplicaci\u00f3n: http://localhost:8080</li> <li>Trazas: http://localhost:9411</li> <li>Health checks: http://localhost:8080/actuator/health</li> <li>Info de m\u00f3dulos: http://localhost:8080/actuator/modulith</li> </ul> <p>\u2705 Arquitectura Validada</p> <pre><code>task test:modulith  # Verifica reglas arquitect\u00f3nicas\n# \u2705 Sin violaciones de encapsulamiento\n# \u2705 Sin dependencias circulares  \n# \u2705 APIs p\u00fablicas bien definidas\n</code></pre>"},{"location":"#comparacion-antes-vs-despues","title":"Comparaci\u00f3n: Antes vs Despu\u00e9s","text":""},{"location":"#desarrollo-tradicional","title":"Desarrollo Tradicional","text":"<pre><code>// \u274c C\u00f3digo acoplado\n@Service\nclass ProductService {\n    @Autowired private OrderRepository orderRepo;     // \u00bfPor qu\u00e9?\n    @Autowired private UserService userService;       // Acoplamiento\n    @Autowired private EmailService emailService;     // Responsabilidades mezcladas\n}\n</code></pre>"},{"location":"#con-spring-modulith","title":"Con Spring Modulith","text":"<pre><code>// \u2705 M\u00f3dulos independientes\n@Service\nclass ProductService {\n    // Solo dependencias del dominio products\n    private final ProductRepository productRepository;\n    private final ApplicationEventPublisher eventPublisher;\n\n    // Comunicaci\u00f3n v\u00eda eventos, no dependencias directas\n    eventPublisher.publishEvent(new ProductCreated(...));\n}\n</code></pre>"},{"location":"#para-quien-es-este-workshop","title":"Para Quien es Este Workshop","text":""},{"location":"#ideal-para","title":"\ud83d\udc4d Ideal para:","text":"<ul> <li>Desarrolladores Java con experiencia en Spring Boot</li> <li>Arquitectos de software evaluando alternativas a microservicios</li> <li>Tech leads buscando mejorar estructura de monolitos existentes</li> <li>Equipos que quieren modularidad sin complejidad distribuida</li> </ul>"},{"location":"#no-recomendado-para","title":"\ud83d\udc4e No recomendado para:","text":"<ul> <li>Principiantes en Spring Boot</li> <li>Proyectos que ya son microservicios exitosos</li> <li>Equipos con infrastructure muy limitada</li> <li>Aplicaciones con un solo dominio muy simple</li> </ul>"},{"location":"#recursos-del-workshop","title":"Recursos del Workshop","text":""},{"location":"#codigo-fuente","title":"C\u00f3digo Fuente","text":"<ul> <li>Repository con todo el c\u00f3digo</li> <li>Commits por cada paso del workshop</li> <li>Branches para cada parte</li> </ul>"},{"location":"#documentacion","title":"Documentaci\u00f3n","text":"<ul> <li>Gu\u00edas detalladas paso a paso</li> <li>Diagramas de arquitectura generados autom\u00e1ticamente</li> <li>Comandos de referencia r\u00e1pida</li> </ul>"},{"location":"#herramientas-de-practica","title":"Herramientas de Pr\u00e1ctica","text":"<pre><code># Comandos principales que usaremos\ntask                    # Ejecutar tests\ntask dev               # Entorno de desarrollo  \ntask demo              # Demo completo\ntask docs              # Generar documentaci\u00f3n\ntask test:modulith     # Verificar arquitectura\n</code></pre>"},{"location":"#proximos-pasos-despues-del-workshop","title":"Pr\u00f3ximos Pasos Despu\u00e9s del Workshop","text":""},{"location":"#inmediatos","title":"Inmediatos","text":"<ol> <li>Experimentar con m\u00e1s m\u00f3dulos (<code>orders</code>, <code>inventory</code>)</li> <li>Aplicar los conceptos en proyectos reales</li> <li>Compartir conocimientos con el equipo</li> </ol>"},{"location":"#a-mediano-plazo","title":"A Mediano Plazo","text":"<ol> <li>Migrar monolitos existentes gradualmente</li> <li>Implementar observabilidad en proyectos actuales</li> <li>Evaluar cu\u00e1ndo extraer m\u00f3dulos como microservicios</li> </ol>"},{"location":"#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de Spring Modulith</li> <li>Ejemplos y workshops</li> <li>Comunidad y discusiones</li> </ul>"},{"location":"#comencemos","title":"\u00a1Comencemos!","text":"<p>\u00bfListo para construir monolitos que no se conviertan en pesadillas?</p>"},{"location":"#estructura-del-workshop_1","title":"Estructura del Workshop","text":"<ol> <li>Parte 1: Fundamentos - Setup y primer m\u00f3dulo</li> <li>Parte 2: CQRS Completo - Command, Query y Events  </li> <li>Parte 3: Observabilidad y Deploy - Zipkin, Kafka y Docker</li> </ol>"},{"location":"#navegacion","title":"Navegaci\u00f3n","text":"<p>Para comenzar el workshop, dir\u00edgete a la Parte 1: Fundamentos donde configuraremos el proyecto desde cero y crearemos nuestro primer m\u00f3dulo.</p>"},{"location":"#informacion-del-instructor","title":"Informaci\u00f3n del Instructor","text":"<p>Este workshop est\u00e1 dise\u00f1ado para ser autoconducido, pero si tienes preguntas:</p> <ul> <li>Revisa la documentaci\u00f3n paso a paso en cada parte</li> <li>Usa los comandos de verificaci\u00f3n incluidos</li> <li>El c\u00f3digo final est\u00e1 disponible como referencia</li> </ul> <p>\u00a1Que disfrutes construyendo arquitecturas limpias y mantenibles!</p>"},{"location":"references/","title":"Referencias sobre Spring Modulith","text":"<p>A continuaci\u00f3n encontrar\u00e1s una lista de recursos \u00fatiles relacionados con Spring Modulith para que puedas consultarlos f\u00e1cilmente:</p> <ol> <li> <p>Video: Introducci\u00f3n a Spring Modulith    Presentaci\u00f3n en video que explica los conceptos clave y el uso de Spring Modulith en proyectos modernos.</p> </li> <li> <p>Documentaci\u00f3n oficial de Spring Modulith    Referencia oficial de Spring que incluye gu\u00edas, conceptos y ejemplos pr\u00e1cticos.</p> </li> <li> <p>Repositorio Spring Modulith en GitHub    C\u00f3digo fuente oficial del proyecto, con ejemplos, issues y contribuciones de la comunidad.</p> </li> <li> <p>Discusiones del proyecto Spring Modulith    Espacio de intercambio de ideas, preguntas y propuestas alrededor del ecosistema de Spring Modulith.</p> </li> </ol>"},{"location":"spring_modulith_part_1/","title":"Gu\u00eda Completa: Implementando CQRS con Spring Modulith desde Cero","text":""},{"location":"spring_modulith_part_1/#tabla-de-contenidos","title":"Tabla de Contenidos","text":"<ol> <li>\u00bfPor qu\u00e9 Spring Modulith? El Problema del Monolito</li> <li>Entendiendo los Monolitos Modulares</li> <li>Creando el Proyecto desde Cero</li> <li>Configuraci\u00f3n de Spring Modulith</li> <li>\u00bfPor qu\u00e9 CQRS en una Tienda Online?</li> <li>Implementando el Primer M\u00f3dulo</li> <li>Verificaci\u00f3n de la Estructura Modular</li> <li>Primer Test: Verificando que Todo Funciona</li> </ol>"},{"location":"spring_modulith_part_1/#por-que-spring-modulith-el-problema-del-monolito","title":"\u00bfPor qu\u00e9 Spring Modulith? El Problema del Monolito","text":""},{"location":"spring_modulith_part_1/#el-ciclo-de-vida-tipico-de-un-proyecto","title":"El Ciclo de Vida T\u00edpico de un Proyecto","text":"<p>Empezaste un proyecto nuevo. Al principio todo est\u00e1 limpio y organizado:</p> <pre><code>\ud83d\udcc1 mi-proyecto/\n\u251c\u2500\u2500 \ud83d\udcc1 controllers/\n\u251c\u2500\u2500 \ud83d\udcc1 services/\n\u251c\u2500\u2500 \ud83d\udcc1 repositories/\n\u2514\u2500\u2500 \ud83d\udcc1 models/\n</code></pre> <p>Despu\u00e9s de 6 meses: <pre><code>// ProductController.java\n@RestController\npublic class ProductController {\n\n    @Autowired\n    private ProductService productService;\n\n    @Autowired \n    private UserRepository userRepository; // \u00bfPor qu\u00e9 est\u00e1 aqu\u00ed?\n\n    @Autowired\n    private OrderService orderService; // Esto no deber\u00eda estar\n\n    @Autowired\n    private EmailService emailService; // Tampoco esto\n}\n</code></pre></p> <p>\u00bfQu\u00e9 pas\u00f3? Bajo presi\u00f3n de fechas de entrega, los desarrolladores empezaron a tomar atajos:</p> <ul> <li>\"Solo necesito este dato, accedo directo al repositorio\"</li> <li>\"Es solo una l\u00ednea, lo pongo aqu\u00ed temporalmente\"</li> <li>\"Despu\u00e9s refactorizamos esto\"</li> </ul>"},{"location":"spring_modulith_part_1/#los-tres-enfoques-y-sus-problemas","title":"Los Tres Enfoques y Sus Problemas","text":""},{"location":"spring_modulith_part_1/#1-monolito-tradicional","title":"1. Monolito Tradicional","text":"<p>Problemas:</p> <ul> <li>\ud83d\udd34 Big Ball of Mud: Todo conectado con todo</li> <li>\ud83d\udd34 Cambios riesgosos: Modificar una parte rompe 10 lugares</li> <li>\ud83d\udd34 Dif\u00edcil de entender: Nuevos desarrolladores se pierden</li> <li>\ud83d\udd34 Testing complejo: Necesitas cargar toda la aplicaci\u00f3n</li> </ul>"},{"location":"spring_modulith_part_1/#2-microservicios","title":"2. Microservicios","text":"<p>Problemas:</p> <ul> <li>\ud83d\udd34 Complejidad distribuida: Network latency, timeouts, circuit breakers</li> <li>\ud83d\udd34 Monitoring complejo: Necesitas rastrear llamadas entre servicios</li> <li>\ud83d\udd34 Costos de infraestructura: M\u00faltiples bases de datos, servicios</li> <li>\ud83d\udd34 Testing dif\u00edcil: Necesitas levantar m\u00faltiples servicios</li> </ul>"},{"location":"spring_modulith_part_1/#3-spring-modulith-la-solucion-moderna","title":"3. Spring Modulith (La Soluci\u00f3n Moderna)","text":"<p>Beneficios:</p> <ul> <li>\u2705 Modularidad sin distribuci\u00f3n: M\u00f3dulos claros en un solo JAR</li> <li>\u2705 Reglas arquitect\u00f3nicas autom\u00e1ticas: El framework previene violaciones</li> <li>\u2705 Testing independiente: Cada m\u00f3dulo se puede testear por separado</li> <li>\u2705 Evoluci\u00f3n gradual: F\u00e1cil migraci\u00f3n a microservicios cuando sea necesario</li> <li>\u2705 Observabilidad: Trazabilidad entre m\u00f3dulos como en microservicios</li> </ul>"},{"location":"spring_modulith_part_1/#entendiendo-los-monolitos-modulares","title":"Entendiendo los Monolitos Modulares","text":""},{"location":"spring_modulith_part_1/#que-es-un-modulo-en-spring-modulith","title":"\u00bfQu\u00e9 es un M\u00f3dulo en Spring Modulith?","text":"<p>Spring Modulith considera que cada paquete directo bajo tu clase principal es un m\u00f3dulo independiente.</p> <pre><code>\ud83d\udcc1 com.geovannycode.store/         &lt;- Paquete ra\u00edz\n\u251c\u2500\u2500 \ud83d\udcc4 StoreApplication.java       &lt;- Clase principal\n\u251c\u2500\u2500 \ud83d\udcc1 products/                   &lt;- M\u00d3DULO: Products\n\u251c\u2500\u2500 \ud83d\udcc1 orders/                     &lt;- M\u00d3DULO: Orders  \n\u251c\u2500\u2500 \ud83d\udcc1 inventory/                  &lt;- M\u00d3DULO: Inventory\n\u251c\u2500\u2500 \ud83d\udcc1 notifications/              &lt;- M\u00d3DULO: Notifications\n\u2514\u2500\u2500 \ud83d\udcc1 common/                     &lt;- M\u00d3DULO: Shared\n</code></pre>"},{"location":"spring_modulith_part_1/#reglas-de-acceso-entre-modulos","title":"Reglas de Acceso Entre M\u00f3dulos","text":"<p>Spring Modulith implementa un conjunto de reglas para garantizar una correcta modularidad y encapsulaci\u00f3n en aplicaciones monol\u00edticas. Estas reglas son verificadas autom\u00e1ticamente en tiempo de compilaci\u00f3n y en los tests.</p>"},{"location":"spring_modulith_part_1/#regla-1-solo-las-clases-publicas-en-la-raiz-del-modulo-son-accesibles","title":"Regla 1: Solo las clases p\u00fablicas en la ra\u00edz del m\u00f3dulo son accesibles","text":"<p>Esta regla es fundamental para entender c\u00f3mo Spring Modulith implementa la encapsulaci\u00f3n a nivel de m\u00f3dulo:</p> <ol> <li> <p>\u00bfQu\u00e9 significa \"ra\u00edz del m\u00f3dulo\"?</p> <ul> <li>La ra\u00edz del m\u00f3dulo es el paquete principal del m\u00f3dulo (por ejemplo, <code>com.geovannycode.store.products</code>)</li> <li>No incluye los sub-paquetes (como <code>com.geovannycode.store.products.internal</code>)</li> </ul> </li> <li> <p>Visibilidad autom\u00e1tica:</p> <ul> <li>Solo las clases p\u00fablicas que est\u00e1n directamente en el paquete ra\u00edz son visibles para otros m\u00f3dulos</li> <li>Las clases en sub-paquetes est\u00e1n autom\u00e1ticamente \"protegidas\", incluso si tienen el modificador <code>public</code></li> <li>Esto funciona como un \"firewall\" autom\u00e1tico que evita dependencias incorrectas</li> </ul> </li> <li> <p>Beneficios pr\u00e1cticos:</p> <ul> <li>Fuerza a los desarrolladores a pensar en qu\u00e9 clases deben ser parte de la API p\u00fablica</li> <li>Evita el \"acoplamiento accidental\" donde otros m\u00f3dulos dependen de detalles de implementaci\u00f3n</li> <li>Permite refactorizar internamente el m\u00f3dulo sin romper otros m\u00f3dulos</li> </ul> </li> </ol>"},{"location":"spring_modulith_part_1/#ejemplo","title":"Ejemplo:","text":"<pre><code>\ud83d\udcc1 products/\n\u251c\u2500\u2500 \ud83d\udcc4 ProductService.java         &lt;- public class (en ra\u00edz) - ACCESIBLE\n\u251c\u2500\u2500 \ud83d\udcc4 Product.java                &lt;- public class (en ra\u00edz) - ACCESIBLE\n\u2514\u2500\u2500 \ud83d\udcc1 internal/\n    \u251c\u2500\u2500 \ud83d\udcc4 ProductRepository.java  &lt;- NO accesible desde otros m\u00f3dulos\n    \u2514\u2500\u2500 \ud83d\udcc4 ProductValidator.java   &lt;- NO accesible desde otros m\u00f3dulos\n</code></pre> <p>Spring Modulith verifica autom\u00e1ticamente que ning\u00fan otro m\u00f3dulo intente importar <code>ProductRepository</code> o <code>ProductValidator</code>, y fallar\u00eda los tests si lo hicieran.</p>"},{"location":"spring_modulith_part_1/#regla-2-named-interfaces-para-exponer-sub-paquetes","title":"Regla 2: Named Interfaces para exponer sub-paquetes","text":"<p>Cuando necesitas hacer una excepci\u00f3n a la Regla 1, puedes usar <code>@NamedInterface</code>:</p> <ol> <li> <p>\u00bfCu\u00e1ndo usar Named Interfaces?</p> <ul> <li>Cuando necesitas exponer clases espec\u00edficas de sub-paquetes a otros m\u00f3dulos</li> <li>Casos comunes: eventos de dominio, DTOs, interfaces de servicio</li> </ul> </li> <li> <p>C\u00f3mo funciona:</p> <ul> <li>Creas un archivo <code>package-info.java</code> en el sub-paquete</li> <li>Anotas el paquete con <code>@NamedInterface(\"nombre\")</code></li> <li>Esto \"expone\" todas las clases p\u00fablicas de ese sub-paquete a otros m\u00f3dulos</li> </ul> </li> <li> <p>Beneficio:</p> <ul> <li>Control expl\u00edcito: debes declarar intencionalmente qu\u00e9 quieres exponer</li> <li>Documentaci\u00f3n autom\u00e1tica: el nombre de la interfaz muestra el prop\u00f3sito de ese sub-paquete</li> </ul> </li> </ol>"},{"location":"spring_modulith_part_1/#ejemplo_1","title":"Ejemplo:","text":"<pre><code>// Si necesitas exponer clases de sub-paquetes:\n\ud83d\udcc1 products/\n\u251c\u2500\u2500 \ud83d\udcc1 events/                    &lt;- Sub-paquete que contiene eventos\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 package-info.java      &lt;- Declaraci\u00f3n de Named Interface\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 ProductCreated.java    &lt;- Ahora ACCESIBLE por otros m\u00f3dulos\n\n// package-info.java\n@NamedInterface(\"events\")\npackage com.geovannycode.store.products.events;\n\nimport org.springframework.modulith.NamedInterface;\n</code></pre> <p>Ahora, otros m\u00f3dulos pueden importar y usar <code>ProductCreated.java</code> porque est\u00e1 en un sub-paquete marcado como <code>@NamedInterface</code>.</p>"},{"location":"spring_modulith_part_1/#en-la-practica","title":"En la pr\u00e1ctica","text":"<p>Estas reglas ayudan a mantener la modularidad porque:</p> <ol> <li>Por defecto, todo est\u00e1 \"escondido\" excepto lo que pones expl\u00edcitamente en la ra\u00edz</li> <li>Cuando necesitas exponer algo de un sub-paquete, lo haces conscientemente</li> <li>Spring Modulith verifica autom\u00e1ticamente estas reglas en los tests</li> </ol> <p>Esto facilita saber exactamente qu\u00e9 est\u00e1 expuesto a otros m\u00f3dulos y qu\u00e9 no, lo que hace la aplicaci\u00f3n m\u00e1s mantenible a largo plazo.</p>"},{"location":"spring_modulith_part_1/#creando-el-proyecto-desde-cero","title":"Creando el Proyecto desde Cero","text":""},{"location":"spring_modulith_part_1/#paso-1-spring-initializr-configuracion-base","title":"Paso 1: Spring Initializr (Configuraci\u00f3n Base)","text":"<p>Visita https://start.spring.io y configura:</p> <p>Configuraci\u00f3n del Proyecto:</p> <ul> <li>Project: Maven Project</li> <li>Language: Java  </li> <li>Spring Boot: 3.5.5 (o la m\u00e1s reciente)</li> <li>Group: <code>com.geovannycode</code></li> <li>Artifact: <code>store-cqrs</code></li> <li>Name: <code>store-cqrs</code></li> <li>Package name: <code>com.geovannycode.store</code></li> <li>Packaging: Jar</li> <li>Java: 21</li> </ul> <p>Dependencias a seleccionar:</p> <ul> <li>Spring Web - Para crear APIs REST</li> <li>Spring Data JPA - Para acceso a base de datos</li> <li>PostgreSQL Driver - Base de datos que usaremos</li> <li>Spring Boot DevTools - Herramientas de desarrollo</li> <li>Lombok - Reduce c\u00f3digo repetitivo</li> <li>\u2705 Spring Modulith - \u00a1Disponible en Developer Tools!</li> <li>Flyway - Migraci\u00f3n de Base de datos</li> <li>Testcontainers - Levantar Postgres (u otros) en Docker para pruebas de integraci\u00f3n.</li> </ul>"},{"location":"spring_modulith_part_1/#paso-2-descargar-y-abrir-el-proyecto","title":"Paso 2: Descargar y Abrir el Proyecto","text":"<ol> <li>Haz clic en \"Generate\" para descargar el ZIP</li> <li>Extrae el archivo</li> <li>Abre el proyecto en tu IDE favorito</li> <li>Espera a que Maven descargue las dependencias</li> </ol>"},{"location":"spring_modulith_part_1/#paso-3-verificar-que-el-proyecto-arranca","title":"Paso 3: Verificar que el Proyecto Arranca","text":"<pre><code># Desde la ra\u00edz del proyecto\n./mvnw spring-boot:run\n\n# Deber\u00edas ver en consola:\n# Started StoreApplication in X.XXX seconds\n</code></pre> <p>Si ves errores de base de datos, no te preocupes. Los corregiremos en los siguientes pasos.</p>"},{"location":"spring_modulith_part_1/#configuracion-de-spring-modulith","title":"Configuraci\u00f3n de Spring Modulith","text":""},{"location":"spring_modulith_part_1/#paso-1-verificar-dependencias-de-spring-modulith","title":"Paso 1: Verificar Dependencias de Spring Modulith","text":"<p>Spring Initializr ya incluye las dependencias b\u00e1sicas de Spring Modulith. Verifica que tu <code>pom.xml</code> tenga:</p> <pre><code>&lt;!-- Spring Modulith ya incluido desde Spring Initializr --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.modulith&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-modulith-starter-core&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Si necesitas funcionalidades adicionales, agrega estas dependencias:</p> <pre><code>&lt;!-- Para eventos persistentes en base de datos (opcional) --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.modulith&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-modulith-starter-jpa&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Soporte de PostgreSQL en Flyway --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n    &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Para testing avanzado de m\u00f3dulos (opcional) --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.modulith&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-modulith-starter-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Para usar PostgreSQL real en tests (opcional) --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;\n    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"spring_modulith_part_1/#paso-2-habilitar-spring-modulith-en-la-aplicacion","title":"Paso 2: Habilitar Spring Modulith en la Aplicaci\u00f3n","text":"<p>Modifica tu clase principal <code>StoreApplication.java</code>:</p> <pre><code>// src/main/java/com/geovannycode/store/StoreApplication.java\npackage com.geovannycode.store;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.modulith.Modulithic;\n\n/**\n * Clase principal de la aplicaci\u00f3n con Spring Modulith habilitado.\n * \n * \u00bfQu\u00e9 hace @Modulithic?\n * 1. Le dice a Spring que esta app usar\u00e1 m\u00f3dulos\n * 2. Cada paquete directo bajo 'com.geovannycode.store' ser\u00e1 un m\u00f3dulo\n * 3. Habilita verificaci\u00f3n autom\u00e1tica de reglas arquitect\u00f3nicas\n * 4. Permite comunicaci\u00f3n entre m\u00f3dulos v\u00eda eventos\n */\n@SpringBootApplication\n@Modulithic  // \ud83d\udc48 Esta anotaci\u00f3n habilita Spring Modulith\npublic class StoreApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(StoreApplication.class, args);\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_1/#paso-3-configurar-base-de-datos","title":"Paso 3: Configurar Base de Datos","text":"<p>Reemplaza el contenido de <code>application.properties</code> por <code>application.yml</code>:</p> <pre><code># src/main/resources/application.yml\nspring:\n  application:\n    name: store-cqrs\n\n  # Configuraci\u00f3n de PostgreSQL\n  datasource:\n    url: jdbc:postgresql://localhost:5432/store_db\n    username: store_user\n    password: store_password\n    driver-class-name: org.postgresql.Driver\n\n  # Configuraci\u00f3n de JPA/Hibernate\n  jpa:\n    hibernate:\n      # validate = usar Flyway para esquema, no Hibernate\n      ddl-auto: validate\n    show-sql: true        # Ver SQL en desarrollo\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.PostgreSQLDialect\n        format_sql: true\n\n  # Configuraci\u00f3n de Flyway para migraciones\n  flyway:\n    enabled: true\n    locations: classpath:db/migration\n    baseline-on-migrate: true\n\n# Configuraci\u00f3n espec\u00edfica de Spring Modulith\nmodulith:\n  events:\n    # \u00bfQu\u00e9 hace? Guarda eventos procesados para auditor\u00eda\n    # Alternativa: delete (elimina eventos procesados para ahorrar espacio)\n    completion-mode: archive\n\n    # \u00bfPara qu\u00e9? Si la app se reinicia, re-procesa eventos pendientes\n    # Garantiza que ning\u00fan evento se pierda\n    republish-outstanding-events-on-restart: true\n\n# Logging para desarrollo - ver qu\u00e9 hace Spring Modulith\nlogging:\n  level:\n    com.geovannycode.store: DEBUG\n    org.springframework.modulith: DEBUG\n</code></pre>"},{"location":"spring_modulith_part_1/#paso-4-docker-compose-para-postgresql","title":"Paso 4: Docker Compose para PostgreSQL","text":"<p>Crea <code>docker-compose.yml</code> en la ra\u00edz del proyecto:</p> <pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  # Base de datos PostgreSQL\n  postgres:\n    image: postgres:17-alpine\n    container_name: store-postgres\n    environment:\n      POSTGRES_DB: store_db\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres -d store_db\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\nvolumes:\n  postgres_data:\n    driver: local\n</code></pre>"},{"location":"spring_modulith_part_1/#paso-5-iniciar-postgresql","title":"Paso 5: Iniciar PostgreSQL","text":"<pre><code># Iniciar PostgreSQL\ndocker-compose up -d\n\n# Verificar que est\u00e9 corriendo\ndocker-compose ps\n# Deber\u00edas ver: store-postgres   Up (healthy)\n</code></pre>"},{"location":"spring_modulith_part_1/#por-que-cqrs-en-una-tienda-online","title":"\u00bfPor qu\u00e9 CQRS en una Tienda Online?","text":""},{"location":"spring_modulith_part_1/#el-problema-desbalance-de-operaciones-en-e-commerce","title":"El Problema: Desbalance de Operaciones en E-commerce","text":"<p>En una tienda online t\u00edpica, existe un desbalance significativo entre operaciones de lectura y escritura:</p> <ul> <li>95% de operaciones: Son lecturas (consultar productos, ver detalles, leer rese\u00f1as)</li> <li>5% de operaciones: Son escrituras (comprar, agregar rese\u00f1as, actualizar inventario)</li> </ul> <p>Esta proporci\u00f3n crea un desaf\u00edo t\u00e9cnico importante: estamos optimizando nuestro sistema para ambos tipos de operaciones cuando tienen necesidades completamente diferentes.</p>"},{"location":"spring_modulith_part_1/#el-enfoque-tradicional-un-modelo-unico","title":"El Enfoque Tradicional: Un Modelo \u00danico","text":"<p>Sin CQRS, usamos el mismo modelo para todas las operaciones:</p> <p>Modelo \u00fanico para todo: <pre><code>// \u274c Un solo modelo Product para escritura Y lectura\n@Entity\npublic class Product {\n    private Long id;\n    private String name;\n    private BigDecimal price;\n    private Integer stock;\n    private List&lt;Review&gt; reviews;  // 1000+ rese\u00f1as por producto\n    private List&lt;Category&gt; categories;\n    private List&lt;Image&gt; images;\n    private List&lt;Variant&gt; variants;\n    // ... 20+ campos m\u00e1s\n}\n</code></pre></p>"},{"location":"spring_modulith_part_1/#problemas-concretos","title":"Problemas Concretos:","text":"<ol> <li>Sobrecarga de Datos: Para mostrar un simple listado de productos, cargas TODA la informaci\u00f3n incluidas las relaciones (como 1000+ rese\u00f1as)    <pre><code>List&lt;Product&gt; products = productRepository.findAll(); // \u00a1Carga excesiva!\n</code></pre></li> <li>C\u00e1lculos Repetitivos: Para mostrar el rating promedio, realizas el c\u00e1lculo cada vez que alguien ve el producto    <pre><code>double rating = product.getReviews().stream()\n    .mapToInt(Review::getRating)\n    .average()\n    .orElse(0.0);\n</code></pre></li> <li> <p>Queries Complejas: Necesitas JOINs constantes incluso para operaciones simples</p> </li> <li> <p>Bloqueos de Base de Datos: Las escrituras pueden bloquear las lecturas, afectando la experiencia del 95% de los usuarios</p> </li> </ol>"},{"location":"spring_modulith_part_1/#la-solucion-cqrs-modelos-especializados","title":"La Soluci\u00f3n CQRS: Modelos Especializados","text":"<p>CQRS divide tu sistema en dos partes con modelos diferentes:</p>"},{"location":"spring_modulith_part_1/#lado-command-escritura-5-de-operaciones","title":"Lado Command (Escritura) - 5% de operaciones","text":"<p>Optimizado para consistencia e integridad:</p> <pre><code>@Entity\npublic class Product {\n    private ProductId id;\n    private String name;\n    private BigDecimal price;\n    private Integer stock;\n    private List&lt;Review&gt; reviews;\n\n    // M\u00e9todos de negocio\n    public void addReview(Review review) {\n        validateReview(review);\n        this.reviews.add(review);\n        // Publicar evento para actualizar vista\n        publishEvent(new ProductReviewed(...));\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_1/#lado-query-lectura-95-de-operaciones","title":"Lado Query (Lectura) - 95% de operaciones","text":"<p>Optimizado para velocidad y simplicidad:</p> <pre><code>@Entity\npublic class ProductView {\n    private ProductId id;\n    private String name;\n    private BigDecimal price;\n    private Integer stock;\n\n    // \u00a1Datos desnormalizados para rapidez!\n    private Double averageRating;    // Ya calculado\n    private Integer reviewCount;     // Ya calculado\n    private String categoryName;     // Sin JOIN\n    private String mainImageUrl;     // Sin JOIN\n}\n</code></pre>"},{"location":"spring_modulith_part_1/#beneficios-especificos-para-e-commerce","title":"Beneficios Espec\u00edficos para E-commerce","text":""},{"location":"spring_modulith_part_1/#1-performance-de-busqueda-dramaticamente-mejorada","title":"1. Performance de B\u00fasqueda Dram\u00e1ticamente Mejorada","text":"<p>Con CQRS: <pre><code>// \u2705 Query s\u00faper r\u00e1pida - datos ya listos\n@Query(\"SELECT p FROM ProductView p WHERE p.categoryName = :category ORDER BY p.averageRating DESC\")\nList&lt;ProductView&gt; findByCategoryOrderByRating(String category);\n\nSin CQRS:\n// \u274c Consulta lenta con m\u00faltiples JOINs y c\u00e1lculos\n@Query(\"SELECT p FROM Product p JOIN p.categories c JOIN p.reviews r WHERE c.name = :category GROUP BY p ORDER BY AVG(r.rating) DESC\")\n</code></pre></p>"},{"location":"spring_modulith_part_1/#2-escalabilidad-horizontal-de-lecturas","title":"2. Escalabilidad Horizontal de Lecturas","text":"<p>Puedes tener m\u00faltiples r\u00e9plicas de base de datos dedicadas solo para lecturas:</p> <pre><code>@Configuration\npublic class DatabaseConfig {\n    @Bean(\"readOnlyDataSource\")\n    public DataSource readOnlyDataSource() {\n        // Conexi\u00f3n a r\u00e9plicas de solo lectura\n    }\n}\n</code></pre> <p>Esto significa que puedes escalar la capacidad de lectura independientemente de la capacidad de escritura.</p>"},{"location":"spring_modulith_part_1/#3-mejor-experiencia-de-usuario-con-actualizaciones-asincronas","title":"3. Mejor Experiencia de Usuario con Actualizaciones As\u00edncronas","text":"<p>Cuando un usuario agrega una rese\u00f1a:</p> <ol> <li>La rese\u00f1a se guarda inmediatamente (Command)</li> <li>El usuario recibe confirmaci\u00f3n sin esperar</li> <li>Los datos de lectura se actualizan as\u00edncronamente (Query)</li> </ol> <pre><code>@ApplicationModuleListener\nvoid on(ProductReviewed event) {\n    // Actualizar rating promedio en background\n    updateProductViewRating(event.productId(), event.rating());\n}\n</code></pre>"},{"location":"spring_modulith_part_1/#cqrs-vs-cache-por-que-no-usar-simplemente-cache","title":"CQRS vs. Cach\u00e9: \u00bfPor qu\u00e9 no usar simplemente cach\u00e9?","text":"<p>Cach\u00e9:</p> <pre><code>// \u274c Cach\u00e9: Datos pueden estar desactualizados\n@Cacheable(\"products\")\npublic List&lt;Product&gt; getProducts() {\n    return productRepository.findAll(); // Datos de hace 1 hora\n}\n</code></pre> <p>CQRS:</p> <pre><code>// \u2705 CQRS: Datos espec\u00edficamente optimizados para lectura\npublic List&lt;ProductView&gt; getProducts() {\n    return productViewRepository.findAll(); // Modelo espec\u00edficamente dise\u00f1ado\n}\n</code></pre> <p>CQRS es superior porque:</p> <ol> <li>Modelos Espec\u00edficos: Dise\u00f1ados exactamente para cada caso de uso</li> <li>Actualizaci\u00f3n Controlada: Sabes exactamente cu\u00e1ndo y c\u00f3mo se actualizan los datos</li> <li>Sin Problemas de Invalidaci\u00f3n: No hay la complejidad de gestionar cu\u00e1ndo invalidar cach\u00e9s</li> <li>Queries Inherentemente Simples: Sin necesidad de JOINs complejos o transformaciones</li> </ol>"},{"location":"spring_modulith_part_1/#implementando-el-primer-modulo","title":"Implementando el Primer M\u00f3dulo","text":""},{"location":"spring_modulith_part_1/#estructura-de-modulos-para-e-commerce","title":"Estructura de M\u00f3dulos para E-commerce","text":"<p>Vamos a crear la estructura b\u00e1sica que necesita una tienda online:</p> <pre><code>\ud83d\udcc1 src/main/java/com/geovannycode/store/\n\u251c\u2500\u2500 \ud83d\udcc4 StoreApplication.java       &lt;- Clase principal\n\u251c\u2500\u2500 \ud83d\udcc1 products/                   &lt;- M\u00f3dulo de productos (empezamos aqu\u00ed)\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 command/               &lt;- Operaciones de escritura\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 query/                 &lt;- Operaciones de lectura\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 events/                &lt;- Eventos entre m\u00f3dulos\n\u251c\u2500\u2500 \ud83d\udcc1 common/                     &lt;- Utilidades compartidas\n\u2514\u2500\u2500 \ud83d\udcc1 config/                     &lt;- Configuraci\u00f3n global\n</code></pre>"},{"location":"spring_modulith_part_1/#paso-1-crear-estructura-de-directorios","title":"Paso 1: Crear Estructura de Directorios","text":"<p>Crea estas carpetas en <code>src/main/java/com/geovannycode/store/</code>:</p> <pre><code># Desde tu IDE o terminal\nmkdir -p src/main/java/com/geovannycode/store/products/command\nmkdir -p src/main/java/com/geovannycode/store/products/query  \nmkdir -p src/main/java/com/geovannycode/store/products/events\nmkdir -p src/main/java/com/geovannycode/store/common\nmkdir -p src/main/java/com/geovannycode/store/config\n</code></pre>"},{"location":"spring_modulith_part_1/#paso-2-crear-migracion-de-base-de-datos","title":"Paso 2: Crear Migraci\u00f3n de Base de Datos","text":"<p>Crea el directorio y archivo de migraci\u00f3n:</p> <pre><code>mkdir -p src/main/resources/db/migration\n</code></pre> <p>Crea <code>src/main/resources/db/migration/V1__create_initial_schema.sql</code>:</p> <pre><code>-- V1__create_initial_schema.sql\n-- Esquema inicial para el m\u00f3dulo products con CQRS\n\n-- =====================================================\n-- LADO COMMAND: Modelos para escritura (normalizados)\n-- =====================================================\n\n-- Tabla principal de productos\nCREATE TABLE products (\n                          id UUID PRIMARY KEY,\n                          name VARCHAR(255) NOT NULL,\n                          description TEXT,\n                          category VARCHAR(100),\n                          price DECIMAL(10,2) NOT NULL CHECK (price &gt;= 0),\n                          stock INTEGER NOT NULL CHECK (stock &gt;= 0),\n                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Tabla de reviews (relaci\u00f3n 1:N con products)\nCREATE TABLE reviews (\n                         id UUID PRIMARY KEY,\n                         product_id UUID NOT NULL REFERENCES products(id),\n                         vote INTEGER NOT NULL CHECK (vote &gt;= 1 AND vote &lt;= 5),\n                         comment TEXT,\n                         author VARCHAR(255),\n                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \u00cdndices para el lado command\nCREATE INDEX idx_reviews_product_id ON reviews(product_id);\nCREATE INDEX idx_products_category ON products(category);\n\n-- =====================================================\n-- LADO QUERY: Modelos para lectura (desnormalizados)\n-- =====================================================\n\n-- Vista de productos optimizada para consultas\nCREATE TABLE product_views (\n                               id UUID PRIMARY KEY,\n                               name VARCHAR(255),\n                               description TEXT,\n                               category VARCHAR(100),\n                               price DECIMAL(10,2),\n                               stock INTEGER,\n\n    -- Campos desnormalizados para performance\n                               average_rating DECIMAL(3,2) DEFAULT 0.0,\n                               review_count INTEGER DEFAULT 0,\n\n                               created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                               updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \u00cdndices optimizados para consultas comunes\nCREATE INDEX idx_product_views_category ON product_views(category);\nCREATE INDEX idx_product_views_rating ON product_views(average_rating DESC);\nCREATE INDEX idx_product_views_price ON product_views(price);\n\n-- =====================================================\n-- DATOS DE EJEMPLO PARA TESTING\n-- =====================================================\n\n-- Insertar productos de ejemplo\nINSERT INTO products (id, name, description, category, price, stock) VALUES\n                                                                         ('f47ac10b-58cc-4372-a567-0e02b2c3d479', 'iPhone 15 Pro', 'Latest iPhone with titanium design', 'Electronics', 999.99, 50),\n                                                                         ('6ba7b810-9dad-11d1-80b4-00c04fd430c8', 'MacBook Air M3', 'Powerful laptop with M3 chip', 'Electronics', 1199.99, 25),\n                                                                         ('6ba7b811-9dad-11d1-80b4-00c04fd430c8', 'AirPods Pro', 'Wireless earbuds with noise cancellation', 'Electronics', 249.99, 100);\n\n-- Insertar reviews de ejemplo\nINSERT INTO reviews (id, product_id, vote, comment, author) VALUES\n                                                                ('a25e6b7c-4e89-4a3f-a90c-f2c66f578c6b', 'f47ac10b-58cc-4372-a567-0e02b2c3d479', 5, 'Amazing phone, love the titanium!', 'John Doe'),\n                                                                ('b43fc3dd-8f2a-4a78-b8cc-181e8e42d8c5', 'f47ac10b-58cc-4372-a567-0e02b2c3d479', 4, 'Great camera quality', 'Jane Smith'),\n                                                                ('c91f4e22-3b5a-4d7f-9a6e-7c9d2b3a1e4d', '6ba7b810-9dad-11d1-80b4-00c04fd430c8', 5, 'Best laptop I have ever used', 'Tech Reviewer');\n\n-- Copiar datos a la vista de lectura\nINSERT INTO product_views (id, name, description, category, price, stock, average_rating, review_count)\nSELECT\n    p.id,\n    p.name,\n    p.description,\n    p.category,\n    p.price,\n    p.stock,\n    COALESCE(r.avg_rating, 0.0) as average_rating,\n    COALESCE(r.review_count, 0) as review_count\nFROM products p\n         LEFT JOIN (\n    SELECT\n        product_id,\n        ROUND(AVG(vote::numeric), 2) as avg_rating,\n        COUNT(*) as review_count\n    FROM reviews\n    GROUP BY product_id\n) r ON p.id = r.product_id;\n\n-- Tabla requerida por Spring Modulith JPA\nCREATE TABLE event_publication (\n                                   id UUID PRIMARY KEY,\n                                   publication_date TIMESTAMP,\n                                   completion_date TIMESTAMP,\n                                   listener_id VARCHAR(255) NOT NULL,\n                                   event_type VARCHAR(255) NOT NULL,\n                                   serialized_event TEXT NOT NULL,\n                                   event_identifier VARCHAR(255) NOT NULL,\n                                   publication_status VARCHAR(255) NOT NULL\n);\n\n-- \u00cdndices para mejorar el rendimiento\nCREATE INDEX idx_event_publication_status ON event_publication(publication_status);\nCREATE INDEX idx_event_publication_listener ON event_publication(listener_id);\n\n-- Tabla de archivado para Spring Modulith\nCREATE TABLE event_publication_archive (\n                                           id UUID PRIMARY KEY,\n                                           publication_date TIMESTAMP,\n                                           completion_date TIMESTAMP,\n                                           listener_id VARCHAR(255) NOT NULL,\n                                           event_type VARCHAR(255) NOT NULL,\n                                           serialized_event TEXT NOT NULL,\n                                           event_identifier VARCHAR(255) NOT NULL,\n                                           publication_status VARCHAR(255) NOT NULL\n);\n\n-- \u00cdndices para el rendimiento\nCREATE INDEX idx_event_publication_archive_listener ON event_publication_archive(listener_id);\nCREATE INDEX idx_event_publication_archive_date ON event_publication_archive(completion_date);\n</code></pre>"},{"location":"spring_modulith_part_1/#paso-3-crear-clase-de-utilidades-comunes","title":"Paso 3: Crear Clase de Utilidades Comunes","text":"<p>Crea <code>src/main/java/com/geovannycode/store/common/PagedResult.java</code>:</p> <pre><code>// src/main/java/com/geovannycode/store/common/PagedResult.java\npackage com.geovannycode.store.common;\n\nimport java.util.List;\n\n/**\n * Resultado paginado gen\u00e9rico que puede usar cualquier m\u00f3dulo.\n * \n * \u00bfPor qu\u00e9 en common? Porque m\u00faltiples m\u00f3dulos necesitar\u00e1n paginaci\u00f3n\n * \u00bfPor qu\u00e9 no en cada m\u00f3dulo? Para evitar duplicaci\u00f3n de c\u00f3digo\n */\npublic record PagedResult&lt;T&gt;(\n    List&lt;T&gt; content,\n    int page,\n    int size,\n    long totalElements,\n    int totalPages,\n    boolean hasNext,\n    boolean hasPrevious\n) {\n    /**\n     * Crear resultado paginado con c\u00e1lculos autom\u00e1ticos.\n     */\n    public static &lt;T&gt; PagedResult&lt;T&gt; of(List&lt;T&gt; content, int page, int size, long totalElements) {\n        int totalPages = (int) Math.ceil((double) totalElements / size);\n        boolean hasNext = page &lt; totalPages - 1;\n        boolean hasPrevious = page &gt; 0;\n\n        return new PagedResult&lt;&gt;(content, page, size, totalElements, totalPages, hasNext, hasPrevious);\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_1/#verificacion-de-la-estructura-modular","title":"Verificaci\u00f3n de la Estructura Modular","text":""},{"location":"spring_modulith_part_1/#por-que-verificar-antes-de-implementar","title":"\u00bfPor qu\u00e9 Verificar Antes de Implementar?","text":"<p>Antes de escribir c\u00f3digo de negocio, necesitamos asegurar que Spring Modulith reconoce correctamente nuestra estructura de m\u00f3dulos.</p>"},{"location":"spring_modulith_part_1/#crear-test-de-verificacion","title":"Crear Test de Verificaci\u00f3n","text":"<p>Crea <code>src/test/java/com/geovannycode/store/ModularityTest.java</code>:</p> <pre><code>// src/test/java/com/geovannycode/store/ModularityTest.java\npackage com.geovannycode.store;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.modulith.core.ApplicationModules;\nimport org.springframework.modulith.docs.Documenter;\n\n/**\n * Test CR\u00cdTICO que verifica la estructura modular.\n * \n * \u00bfPara qu\u00e9 sirve?\n * 1. Valida que Spring Modulith reconoce nuestros m\u00f3dulos\n * 2. Detecta violaciones de encapsulamiento\n * 3. Previene dependencias circulares\n * 4. Genera documentaci\u00f3n autom\u00e1tica\n * \n * Este test debe ejecutarse ANTES de implementar funcionalidad.\n */\nclass ModularityTest {\n\n    // Spring Modulith analiza la aplicaci\u00f3n y encuentra m\u00f3dulos\n    ApplicationModules modules = ApplicationModules.of(StoreCqrsApplication.class);\n\n    /**\n     * Test principal - verifica todas las reglas modulares.\n     * \n     * \u00bfQu\u00e9 verifica?\n     * - Cada paquete bajo com.geovannycode.store es un m\u00f3dulo\n     * - No hay violaciones de acceso entre m\u00f3dulos\n     * - No hay dependencias circulares\n     * - Las APIs p\u00fablicas est\u00e1n bien definidas\n     */\n    @Test\n    void shouldHaveValidModularStructure() {\n        // Si hay violaciones, este m\u00e9todo lanza excepci\u00f3n con detalles\n        modules.verify();\n    }\n\n    /**\n     * Genera documentaci\u00f3n autom\u00e1tica de la arquitectura.\n     * \n     * \u00bfQu\u00e9 genera?\n     * - Diagramas PlantUML de los m\u00f3dulos\n     * - Documentaci\u00f3n AsciiDoc\n     * - Module Canvas (diagramas C4)\n     * \n     * Los archivos se generan en: target/spring-modulith-docs/\n     */\n    @Test\n    void shouldGenerateDocumentation() throws Exception {\n        new Documenter(modules)\n            .writeDocumentation()           // AsciiDoc\n            .writeModuleCanvases()          // Diagramas C4\n            .writeIndividualModulesAsPlantUml(); // PlantUML\n    }\n\n    /**\n     * Test informativo - muestra qu\u00e9 m\u00f3dulos encontr\u00f3 Spring Modulith.\n     */\n    @Test\n    void showModuleStructure() {\n        log.info(\"\ud83c\udfd7\ufe0f Estructura de m\u00f3dulos detectada:\");\n        modules.forEach(module -&gt; {\n            var name = module.getDisplayName();                       \n            var basePkg = module.getBasePackage().getName();\n\n            // Dependencias directas (o usa getDependencies(modules, DependencyDepth.DIRECT, ...) si prefieres)\n            long directDeps = module.getDirectDependencies(modules).uniqueModules().count();\n\n            String depsList = module.getDirectDependencies(modules)\n                    .uniqueModules()\n                    .map(ApplicationModule::getDisplayName)\n                    .sorted()\n                    .collect(Collectors.joining(\", \"));\n\n            if (depsList.isBlank()) depsList = \"(ninguna)\";\n\n            log.info(\"\ud83d\udce6 M\u00f3dulo: {}\", name);\n            log.info(\"   \ud83d\udcc1 Paquete: {}\", basePkg);\n            log.info(\"   \ud83d\udd17 Dependencias directas ({}): {}\", directDeps, depsList);\n        });\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_1/#primer-test-verificando-que-todo-funciona","title":"Primer Test: Verificando que Todo Funciona","text":""},{"location":"spring_modulith_part_1/#paso-1-ejecutar-test-de-modularidad","title":"Paso 1: Ejecutar Test de Modularidad","text":"<pre><code># Ejecutar solo el test de modularidad\n./mvnw test -Dtest=ModularityTest\n\n# Si todo est\u00e1 bien, ver\u00e1s:\n# \u2705 Tests run: 1, Failures: 0, Errors: 0\n</code></pre> <p>Salida esperada: <pre><code>\ud83c\udfd7\ufe0f Estructura de m\u00f3dulos detectada:\n\ud83d\udce6 M\u00f3dulo: common\n   \ud83d\udcc1 Paquete: com.geovannycode.store.common\n   \ud83d\udd17 Dependencias: 0\n</code></pre></p>"},{"location":"spring_modulith_part_1/#paso-2-verificar-documentacion-generada","title":"Paso 2: Verificar Documentaci\u00f3n Generada","text":"<p>Despu\u00e9s de ejecutar los tests, verifica que se gener\u00f3 documentaci\u00f3n:</p> <pre><code># Verificar archivos generados\nls -la target/spring-modulith-docs/\n\n# Deber\u00edas ver archivos como:\n# - modules.adoc\n# - module-products.adoc\n# - module-common.adoc\n# - modules.puml\n</code></pre>"},{"location":"spring_modulith_part_1/#paso-3-ejecutar-la-aplicacion","title":"Paso 3: Ejecutar la Aplicaci\u00f3n","text":"<pre><code># Iniciar la aplicaci\u00f3n\n./mvnw spring-boot:run\n\n# Deber\u00edas ver en consola:\n# Started StoreApplication in X.XXX seconds (JVM running for Y.YYY)\n</code></pre> <p>\u00bfQu\u00e9 pasa si hay errores?</p> <p>Error com\u00fan 1: PostgreSQL no conecta <pre><code># Soluci\u00f3n: Verificar Docker\ndocker-compose ps\n# Si no est\u00e1 running: docker-compose up -d\n</code></pre></p> <p>Error com\u00fan 2: Flyway falla <pre><code># Soluci\u00f3n: Limpiar y reiniciar BD\ndocker-compose down -v\ndocker-compose up -d\n./mvnw spring-boot:run\n</code></pre></p>"},{"location":"spring_modulith_part_1/#paso-4-verificar-endpoints-basicos","title":"Paso 4: Verificar Endpoints B\u00e1sicos","text":"<p>Abre otra terminal y verifica que la aplicaci\u00f3n responde:</p> <pre><code># Verificar que la app est\u00e1 viva\ncurl http://localhost:8080/actuator/health\n\n# Respuesta esperada:\n# {\"status\":\"UP\"}\n</code></pre>"},{"location":"spring_modulith_part_1/#que-hemos-logrado-hasta-ahora","title":"\u00bfQu\u00e9 Hemos Logrado Hasta Ahora?","text":"<p>\u2705 Proyecto base funcional con Spring Boot + Spring Modulith \u2705 Estructura modular reconocida autom\u00e1ticamente \u2705 Base de datos PostgreSQL configurada y corriendo \u2705 Esquema de BD creado con datos de ejemplo \u2705 Tests de arquitectura que verifican reglas modulares \u2705 Documentaci\u00f3n autom\u00e1tica generada  </p>"},{"location":"spring_modulith_part_1/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>En la Parte 2 implementaremos:</p> <ul> <li>Lado Command con entidades y servicios</li> <li>Lado Query con modelos optimizados  </li> <li>Eventos entre m\u00f3dulos</li> <li>Controllers REST funcionales</li> <li>Testing independiente de m\u00f3dulos</li> </ul> <p>\u00a1Tu proyecto ya est\u00e1 listo para implementar CQRS con Spring Modulith!</p>"},{"location":"spring_modulith_part_2/","title":"Gu\u00eda CQRS Spring Modulith - Parte 2: Implementaci\u00f3n Completa","text":""},{"location":"spring_modulith_part_2/#continuando-desde-la-parte-1","title":"Continuando desde la Parte 1","text":"<p>En la Parte 1 configuramos la base del proyecto. Ahora vamos a implementar completamente el patr\u00f3n CQRS con Spring Modulith, paso a paso.</p>"},{"location":"spring_modulith_part_2/#tabla-de-contenidos-parte-2","title":"Tabla de Contenidos - Parte 2","text":"<ol> <li>Implementando las Entidades del Lado Command</li> <li>ProductRepository - La Puerta de Acceso a la Base de Datos</li> <li>ProductCommandService - El Cerebro de las Operaciones</li> <li>ProductCommandController - La Puerta de Entrada HTTP</li> <li>Lado Query - Modelos Optimizados para Lectura</li> <li>ProductEventHandler - Sincronizaci\u00f3n As\u00edncrona</li> <li>Repository de Query - Consultas Optimizadas</li> <li>Controller de Query - APIs de Lectura</li> <li>Testing Independiente de M\u00f3dulos</li> <li>Pr\u00f3ximos Pasos y Mejoras</li> </ol>"},{"location":"spring_modulith_part_2/#implementando-las-entidades-del-lado-command","title":"Implementando las Entidades del Lado Command","text":"<p>Antes de comenzar con los repositories y services, necesitamos crear las entidades b\u00e1sicas. Empezaremos por las clases que faltaban de la Parte 1.</p>"},{"location":"spring_modulith_part_2/#paso-1-agregar-dependencia-jmolecules","title":"Paso 1: Agregar dependencia jMolecules","text":"<p>Primero, debemos agregar la dependencia de jMolecules a nuestro archivo <code>pom.xml</code>. Esta biblioteca proporciona las interfaces y anotaciones necesarias para implementar Domain-Driven Design (DDD) en nuestro proyecto CQRS:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.jmolecules&lt;/groupId&gt;\n    &lt;artifactId&gt;jmolecules-ddd&lt;/artifactId&gt;\n    &lt;version&gt;1.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Esta dependencia es esencial para utilizar interfaces como <code>AggregateRoot</code>, <code>Entity</code> e <code>Identifier</code> que utilizamos en nuestras clases de dominio.</p>"},{"location":"spring_modulith_part_2/#paso-2-crear-las-entidades-de-comando","title":"Paso 2: Crear las Entidades de Comando","text":""},{"location":"spring_modulith_part_2/#productjava","title":"Product.java","text":"<p>Crea <code>src/main/java/com/geovannycode/store/products/command/Product.java</code>:</p> <pre><code>// src/main/java/com/geovannycode/store/products/command/Product.java\npackage com.geovannycode.store.products.command;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.jmolecules.ddd.types.AggregateRoot;\nimport org.jmolecules.ddd.types.Identifier;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\n/**\n * Agregado Product del lado Command.\n * Optimizado para mantener consistencia e integridad de datos.\n */\n@Getter\n@Setter\npublic class Product implements AggregateRoot&lt;Product, Product.ProductIdentifier&gt; {\n\n    private ProductIdentifier id;\n    private String name;\n    private String description;\n    private String category;\n    private BigDecimal price;\n    private Integer stock;\n    private List&lt;Review&gt; productReviews = new ArrayList&lt;&gt;();\n\n    public Product() {\n        this.id = new ProductIdentifier(UUID.randomUUID());\n    }\n\n    /**\n     * Agregar un review al producto.\n     * Mantiene la consistencia del agregado.\n     */\n    public Product add(Review review) {\n        if (review == null) {\n            throw new IllegalArgumentException(\"Review cannot be null\");\n        }\n        this.productReviews.add(review);\n        return this;\n    }\n\n    /**\n     * Value Object para el identificador del producto.\n     */\n    public record ProductIdentifier(UUID id) implements Identifier {\n        public ProductIdentifier {\n            if (id == null) {\n                throw new IllegalArgumentException(\"Product ID cannot be null\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#reviewjava","title":"Review.java","text":"<p>Crea <code>src/main/java/com/geovannycode/store/products/command/Review.java</code>:</p> <pre><code>// src/main/java/com/geovannycode/store/products/command/Review.java\npackage com.geovannycode.store.products.command;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.jmolecules.ddd.types.Entity;\n\nimport java.util.UUID;\n\n/**\n * Entidad Review dentro del agregado Product.\n */\n@Getter\n@Setter\npublic class Review implements Entity&lt;Product, ReviewIdentifier&gt; {\n\n    private ReviewIdentifier id;\n    private Integer vote;\n    private String comment;\n    private String author;\n\n    public Review() {\n        this.id = new ReviewIdentifier(UUID.randomUUID());\n    }\n\n    /**\n     * Validar que el voto est\u00e9 en rango v\u00e1lido.\n     */\n    public void setVote(Integer vote) {\n        if (vote == null || vote &lt; 1 || vote &gt; 5) {\n            throw new IllegalArgumentException(\"Vote must be between 1 and 5\");\n        }\n        this.vote = vote;\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#reviewidentifierjava","title":"ReviewIdentifier.java","text":"<p>Crea <code>src/main/java/com/geovannycode/store/products/command/ReviewIdentifier.java</code>:</p> <pre><code>// src/main/java/com/geovannycode/store/products/command/ReviewIdentifier.java\npackage com.geovannycode.store.products.command;\n\nimport org.jmolecules.ddd.types.Identifier;\n\nimport java.util.UUID;\n\n/**\n * Value Object para identificar reviews.\n */\npublic record ReviewIdentifier(UUID id) implements Identifier {\n    public ReviewIdentifier {\n        if (id == null) {\n            throw new IllegalArgumentException(\"Review ID cannot be null\");\n        }\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#por-que-necesitamos-jmolecules","title":"\u00bfPor qu\u00e9 necesitamos jMolecules?","text":"<p>jMolecules proporciona las interfaces base que utilizamos para implementar conceptos de DDD:</p> <ul> <li><code>AggregateRoot</code>: Identifica un agregado ra\u00edz en nuestro dominio (Product)</li> <li><code>Entity</code>: Identifica una entidad dentro del agregado (Review)</li> <li><code>Identifier</code>: Proporciona identificadores value-object para nuestras entidades</li> </ul> <p>Esta biblioteca nos ayuda a expresar claramente la estructura del dominio y las relaciones entre entidades, siguiendo las mejores pr\u00e1cticas de DDD.</p>"},{"location":"spring_modulith_part_2/#paso-3-crear-los-eventos-de-dominio","title":"Paso 3: Crear los Eventos de Dominio","text":"<p>Crea <code>src/main/java/com/geovannycode/store/products/command/ProductEvents.java</code>:</p> <pre><code>// src/main/java/com/geovannycode/store/products/command/ProductEvents.java\npackage com.geovannycode.store.products.command;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport org.jmolecules.event.types.DomainEvent;\n\nimport java.math.BigDecimal;\n\n/**\n * Eventos de dominio del m\u00f3dulo Products.\n * Permiten comunicaci\u00f3n as\u00edncrona entre m\u00f3dulos.\n */\npublic class ProductEvents {\n\n    /**\n     * Evento publicado cuando se crea un producto.\n     */\n    public record ProductCreated(\n        ProductIdentifier id,\n        String name,\n        String description,\n        BigDecimal price,\n        Integer stock,\n        String category\n    ) implements DomainEvent {}\n\n    /**\n     * Evento publicado cuando se actualiza un producto.\n     */\n    public record ProductUpdated(\n        ProductIdentifier id,\n        String name,\n        String description,\n        BigDecimal price,\n        Integer stock,\n        String category\n    ) implements DomainEvent {}\n\n    /**\n     * Evento publicado cuando se agrega un review.\n     */\n    public record ProductReviewed(\n        ProductIdentifier productId,\n        ReviewIdentifier reviewId,\n        Integer vote,\n        String comment\n    ) implements DomainEvent {}\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#productrepository-la-puerta-de-acceso-a-la-base-de-datos","title":"ProductRepository - La Puerta de Acceso a la Base de Datos","text":""},{"location":"spring_modulith_part_2/#que-es-un-repository","title":"\u00bfQu\u00e9 es un Repository?","text":"<p>Definici\u00f3n simple: Una \"caja\" que guarda y busca objetos en la base de datos Analog\u00eda: Como un archivero - puedes guardar documentos y buscarlos despu\u00e9s En c\u00f3digo: Provides m\u00e9todos como <code>save()</code>, <code>findById()</code>, <code>findAll()</code></p>"},{"location":"spring_modulith_part_2/#por-que-crear-una-interface-en-lugar-de-una-clase","title":"\u00bfPor qu\u00e9 crear una interface en lugar de una clase?","text":"<ul> <li>Spring Data JPA genera autom\u00e1ticamente la implementaci\u00f3n</li> <li>T\u00fa solo defines QU\u00c9 quieres hacer, Spring hace el C\u00d3MO</li> <li>Es m\u00e1s f\u00e1cil hacer testing (puedes crear versiones falsas)</li> </ul>"},{"location":"spring_modulith_part_2/#implementacion-paso-a-paso","title":"Implementaci\u00f3n paso a paso","text":"<pre><code>// src/main/java/com/geovannycode/store/products/command/ProductRepository.java\npackage com.geovannycode.store.products.command;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport org.springframework.data.repository.CrudRepository;\n\n/**\n * Repository para el agregado Product.\n * \n * \u00bfPor qu\u00e9 interface y no class?\n * - Spring Data JPA genera autom\u00e1ticamente la implementaci\u00f3n\n * - Proporciona m\u00e9todos como save(), findById(), deleteById() gratis\n * - Podemos agregar m\u00e9todos personalizados si necesitamos\n * \n * \u00bfPor qu\u00e9 package-private (sin 'public')?\n * - Solo ProductCommandService deber\u00eda usar este repository\n * - Otros m\u00f3dulos deben ir a trav\u00e9s de la API p\u00fablica ProductService\n * - Esto mantiene el encapsulamiento del m\u00f3dulo\n * \n * \u00bfQu\u00e9 es CrudRepository&lt;Product, ProductIdentifier&gt;?\n * - Product: El tipo de objeto que guardamos\n * - ProductIdentifier: El tipo del ID\n * - CRUD: Create, Read, Update, Delete\n */\ninterface ProductRepository extends CrudRepository&lt;Product, ProductIdentifier&gt; {\n\n    // Spring Data JPA genera autom\u00e1ticamente estos m\u00e9todos:\n    // - save(Product product)\n    // - findById(ProductIdentifier id)\n    // - findAll()\n    // - deleteById(ProductIdentifier id)\n    // - count()\n    // - existsById(ProductIdentifier id)\n\n    // Si necesit\u00e1ramos m\u00e9todos personalizados, los agregar\u00edamos aqu\u00ed:\n    // List&lt;Product&gt; findByCategory(String category);\n    // List&lt;Product&gt; findByPriceBetween(BigDecimal min, BigDecimal max);\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#como-sabe-spring-que-base-de-datos-usar","title":"\u00bfC\u00f3mo sabe Spring qu\u00e9 base de datos usar?","text":"<ul> <li>Lee la configuraci\u00f3n de <code>application.yml</code></li> <li>Usa el driver de PostgreSQL que agregamos en <code>pom.xml</code></li> <li>Genera autom\u00e1ticamente el SQL necesario</li> </ul>"},{"location":"spring_modulith_part_2/#productcommandservice-el-cerebro-de-las-operaciones","title":"ProductCommandService - El Cerebro de las Operaciones","text":""},{"location":"spring_modulith_part_2/#que-hace-un-service","title":"\u00bfQu\u00e9 hace un Service?","text":"<p>Definici\u00f3n: Contiene la l\u00f3gica de negocio Ejemplo: \"Para crear un producto, validar datos + guardar + notificar\" Regla: Los Controllers son delgados, los Services contienen la l\u00f3gica</p>"},{"location":"spring_modulith_part_2/#conceptos-importantes-que-vamos-a-usar","title":"Conceptos importantes que vamos a usar:","text":""},{"location":"spring_modulith_part_2/#que-es-service","title":"\u00bfQu\u00e9 es @Service?","text":"<ul> <li>Le dice a Spring: \"Esta clase contiene l\u00f3gica de negocio\"</li> <li>Spring la crea autom\u00e1ticamente (no necesitas <code>new ProductCommandService()</code>)</li> <li>Permite que otras clases la usen con <code>@Autowired</code> o constructor</li> </ul>"},{"location":"spring_modulith_part_2/#que-es-transactional","title":"\u00bfQu\u00e9 es @Transactional?","text":"<p>Definici\u00f3n: \"Todo o nada\" para operaciones de base de datos</p> <p>Ejemplo pr\u00e1ctico: <pre><code>@Transactional\npublic void transferirDinero(String origen, String destino, BigDecimal cantidad) {\n    // Paso 1: Quitar dinero de cuenta origen\n    cuentaRepository.restar(origen, cantidad);\n\n    // Paso 2: Agregar dinero a cuenta destino  \n    cuentaRepository.sumar(destino, cantidad);\n\n    // Si CUALQUIER paso falla, se deshace TODO\n    // No queda dinero \"en el aire\"\n}\n</code></pre></p> <p>\u00bfPor qu\u00e9 es importante?</p> <ul> <li>Garantiza que la base de datos siempre est\u00e9 consistente</li> <li>Si algo falla, autom\u00e1ticamente deshace todos los cambios</li> <li>No tienes que manejar manualmente las fallas</li> </ul>"},{"location":"spring_modulith_part_2/#que-es-applicationeventpublisher","title":"\u00bfQu\u00e9 es ApplicationEventPublisher?","text":"<p>Definici\u00f3n simple: El \"mensajero\" que env\u00eda eventos a otros m\u00f3dulos</p> <p>\u00bfC\u00f3mo funciona?</p> <ol> <li>Publicas: <code>eventPublisher.publishEvent(new ProductCreated(...))</code></li> <li>Spring busca qui\u00e9n quiere escuchar ese evento</li> <li>Spring se lo entrega autom\u00e1ticamente</li> </ol> <p>Analog\u00eda: Como WhatsApp - env\u00edas un mensaje a un grupo y todos los miembros lo reciben</p>"},{"location":"spring_modulith_part_2/#que-es-requiredargsconstructor","title":"\u00bfQu\u00e9 es @RequiredArgsConstructor?","text":"<ul> <li>Lombok genera autom\u00e1ticamente un constructor con todos los campos <code>final</code></li> <li>Es la forma moderna de hacer dependency injection</li> <li>M\u00e1s limpio que <code>@Autowired</code> en cada campo</li> </ul>"},{"location":"spring_modulith_part_2/#organizacion-del-codigo-para-manejo-de-errores","title":"Organizaci\u00f3n del c\u00f3digo para manejo de errores","text":"<p>Para una mejor organizaci\u00f3n y siguiendo buenas pr\u00e1cticas, tenemos un paquete dedicado para las excepciones:</p> <pre><code>com.geovannycode.store.products.exception\n</code></pre> <p>Dentro de este paquete encontramos:</p>"},{"location":"spring_modulith_part_2/#productexception-base","title":"ProductException (Base)","text":"<pre><code>package com.geovannycode.store.products.exception;\n\n/**\n * Excepci\u00f3n base para todas las excepciones relacionadas con productos.\n * Define un comportamiento com\u00fan para todas las excepciones del m\u00f3dulo.\n */\npublic abstract class ProductException extends RuntimeException {\n    public ProductException(String message) {\n        super(message);\n    }\n\n    public ProductException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n</code></pre> <p>\u00bfPor qu\u00e9 una clase base abstracta?</p> <ul> <li>Permite agrupar todas las excepciones de productos</li> <li>Facilita el manejo de excepciones en los controladores</li> <li>Crea una jerarqu\u00eda clara de excepciones</li> </ul>"},{"location":"spring_modulith_part_2/#productnotfoundexception","title":"ProductNotFoundException","text":"<pre><code>package com.geovannycode.store.products.exception;\n\n/**\n * Excepci\u00f3n lanzada cuando se intenta acceder a un producto que no existe.\n */\npublic class ProductNotFoundException extends ProductException {\n    public ProductNotFoundException(String message) {\n        super(message);\n    }\n}\n</code></pre> <p>\u00bfCu\u00e1ndo se usa?</p> <ul> <li>Cuando intentamos buscar un producto que no existe</li> <li>En operaciones de actualizaci\u00f3n cuando el producto no se encuentra</li> <li>En cualquier operaci\u00f3n que requiera un producto existente</li> </ul>"},{"location":"spring_modulith_part_2/#invalidvoteexception","title":"InvalidVoteException","text":"<pre><code>package com.geovannycode.store.products.exception;\n\n/**\n * Excepci\u00f3n lanzada cuando se intenta crear una rese\u00f1a con un voto inv\u00e1lido.\n */\npublic class InvalidVoteException extends ProductException {\n    public InvalidVoteException(String message) {\n        super(message);\n    }\n}\n</code></pre> <p>\u00bfCu\u00e1ndo se usa?</p> <ul> <li>Cuando el voto est\u00e1 fuera del rango permitido (1-5)</li> <li>Cuando el voto es nulo</li> <li>Para validar las reglas de negocio de las rese\u00f1as</li> </ul>"},{"location":"spring_modulith_part_2/#implementacion-paso-a-paso_1","title":"Implementaci\u00f3n paso a paso","text":"<pre><code>// src/main/java/com/geovannycode/store/products/command/ProductCommandService.java\npackage com.geovannycode.store.products.command;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport com.geovannycode.store.products.command.ProductEvents.ProductCreated;\nimport com.geovannycode.store.products.command.ProductEvents.ProductReviewed;\nimport com.geovannycode.store.products.command.ProductEvents.ProductUpdated;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\n\n/**\n * Servicio para operaciones de comando de productos.\n * \n * \u00bfPor qu\u00e9 package-private (class sin public)?\n * - Solo el controller de este m\u00f3dulo deber\u00eda usarlo directamente\n * - Otros m\u00f3dulos usan la API p\u00fablica ProductService\n * - Mantiene el encapsulamiento del m\u00f3dulo\n */\n@Service                    // Spring maneja esta clase autom\u00e1ticamente\n@Transactional              // Todas las operaciones son \"todo o nada\"\n@RequiredArgsConstructor    // Lombok genera constructor con campos final\nclass ProductCommandService {\n\n    // Constantes para mensajes de error\n    private static final String PRODUCT_NOT_FOUND = \"Product not found with id: \";\n    private static final String INVALID_VOTE_RANGE = \"Vote must be between 1 and 5\";\n\n    // Dependencias que Spring inyecta autom\u00e1ticamente\n    private final ProductRepository products;\n    private final ApplicationEventPublisher eventPublisher;\n\n    /**\n     * Crea un nuevo producto.\n     * \n     * \u00bfQu\u00e9 pasa paso a paso?\n     * 1. Crear objeto Product con datos recibidos\n     * 2. Guardar en base de datos  \n     * 3. Publicar evento ProductCreated\n     * 4. Devolver el ID del producto creado\n     * \n     * \u00bfQu\u00e9 pasa si algo falla?\n     * - @Transactional deshace todo autom\u00e1ticamente\n     * - La base de datos queda como estaba antes\n     * - El evento NO se publica si fall\u00f3 el guardado\n     */\n    ProductIdentifier createProduct(String name, String description, BigDecimal price, \n                                   Integer stock, String category) {\n\n         // Paso 1: Crear el objeto Product\n        var product = createProductEntity(name, description, price, stock, category);\n\n        // Paso 2: Guardar en base de datos\n        var saved = products.save(product);\n\n        // Paso 3: Publicar evento (solo si el guardado fue exitoso)\n        publishProductCreatedEvent(saved);\n\n        // Paso 4: Devolver el ID\n        return saved.getId();\n    }\n\n    /**\n     * Actualiza un producto existente.\n     * \n     * \u00bfPor qu\u00e9 lanzar excepci\u00f3n si no existe?\n     * - Es mejor fallar r\u00e1pido que continuar con datos incorrectos\n     * - El controller puede manejar la excepci\u00f3n y devolver 404\n     * - El usuario sabe exactamente qu\u00e9 pas\u00f3\n     */\n    void updateProduct(ProductIdentifier productId, String name, String description, \n                      BigDecimal price, Integer stock, String category) {\n\n         // Buscar y actualizar el producto\n        var product = findProductOrThrow(productId);\n        updateProductFields(product, name, description, price, stock, category);\n\n        // Persistir y publicar evento\n        products.save(product);\n        publishProductUpdatedEvent(product);\n    }\n\n    /**\n     * Agrega un review a un producto.\n     * \n     * \u00bfPor qu\u00e9 validar aqu\u00ed y no en Product?\n     * - El servicio es responsable de validaciones de negocio\n     * - Product se enfoca en mantener consistencia interna\n     * - Separaci\u00f3n clara de responsabilidades\n     * \n     * \u00bfPor qu\u00e9 usar map() y flatMap()?\n     * - Es programaci\u00f3n funcional: m\u00e1s expresivo y menos propenso a errores\n     * - Evita if/else anidados\n     * - El c\u00f3digo lee como una secuencia de pasos\n     */\n    Review addReview(ProductIdentifier productId, Integer vote, String comment) {\n        // Validar el voto seg\u00fan reglas de negocio\n        validateVote(vote);\n\n        // Crear el review\n        var review = createReview(vote, comment);\n\n        // Buscar producto, agregar review y guardar\n        var product = findProductOrThrow(productId)\n                .add(review);\n        products.save(product);\n\n        // Publicar evento de review a\u00f1adido\n        publishReviewAddedEvent(product.getId(), review);\n\n        return review;\n    }\n\n// ===== M\u00e9todos privados de soporte =====\n\n    private Product createProductEntity(String name, String description,\n                                       BigDecimal price, Integer stock, String category) {\n        var product = new Product();\n        product.setName(name);\n        product.setDescription(description);\n        product.setPrice(price);\n        product.setStock(stock);\n        product.setCategory(category);\n        return product;\n    }\n\n    private void publishProductCreatedEvent(Product product) {\n        eventPublisher.publishEvent(\n                new ProductEvents.ProductCreated(\n                        product.getId(),\n                        product.getName(),\n                        product.getDescription(),\n                        product.getPrice(),\n                        product.getStock(),\n                        product.getCategory()\n                )\n        );\n    }\n\n    private void updateProductFields(Product product, String name, String description,\n                                    BigDecimal price, Integer stock, String category) {\n        product.setName(name);\n        product.setDescription(description);\n        product.setPrice(price);\n        product.setStock(stock);\n        product.setCategory(category);\n    }\n\n    private Review createReview(Integer vote, String comment) {\n        var review = new Review();\n        review.setVote(vote);\n        review.setComment(comment);\n        return review;\n    }\n\n    private void publishProductUpdatedEvent(Product product) {\n        eventPublisher.publishEvent(\n                new ProductEvents.ProductUpdated(\n                        product.getId(),\n                        product.getName(),\n                        product.getDescription(),\n                        product.getPrice(),\n                        product.getStock(),\n                        product.getCategory()\n                )\n        );\n    }\n\n    /**\n     * Busca un producto por ID o lanza una excepci\u00f3n si no existe.\n     * \n     * @throws ProductNotFoundException si el producto no existe\n     */\n    private Product findProductOrThrow(Product.ProductIdentifier productId) {\n        return products.findById(productId)\n                .orElseThrow(() -&gt; new ProductNotFoundException(PRODUCT_NOT_FOUND + productId));\n    }\n\n    /**\n     * Valida que el voto est\u00e9 dentro del rango permitido.\n     * \n     * @throws InvalidVoteException si el voto es nulo o est\u00e1 fuera de rango\n     */\n    private void validateVote(Integer vote) {\n        if (vote == null || vote &lt; 1 || vote &gt; 5) {\n            throw new InvalidVoteException(INVALID_VOTE_RANGE);\n        }\n    }\n\n    private void publishReviewAddedEvent(Product.ProductIdentifier productId, Review review) {\n        eventPublisher.publishEvent(\n                new ProductEvents.ProductReviewed(\n                        productId,\n                        review.getId(),\n                        review.getVote(),\n                        review.getComment()\n                )\n        );\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#que-pasa-cuando-publicas-un-evento","title":"\u00bfQu\u00e9 pasa cuando publicas un evento?","text":"<ol> <li>Inmediatamente: Spring busca clases con <code>@ApplicationModuleListener</code></li> <li>As\u00edncronamente: Ejecuta esos m\u00e9todos en background</li> <li>Con persistencia: Si falla, Spring Modulith puede reintentar despu\u00e9s</li> <li>Sin bloquear: Tu m\u00e9todo contin\u00faa normalmente</li> </ol>"},{"location":"spring_modulith_part_2/#productcommandcontroller-la-puerta-de-entrada-http","title":"ProductCommandController - La Puerta de Entrada HTTP","text":""},{"location":"spring_modulith_part_2/#que-hace-un-controller","title":"\u00bfQu\u00e9 hace un Controller?","text":"<p>Definici\u00f3n: Un Controller recibe peticiones HTTP del cliente (navegador, aplicaci\u00f3n m\u00f3vil, etc.) y devuelve respuestas HTTP apropiadas.</p> <p>Responsabilidad: Act\u00faa como la \"cara\" de tu aplicaci\u00f3n hacia el mundo exterior, siendo el punto de entrada para todas las interacciones externas.</p> <p>Regla de oro: Debe mantenerse \"delgado\" (thin) - su \u00fanica responsabilidad es convertir peticiones HTTP en llamadas a servicios y transformar las respuestas de estos servicios en respuestas HTTP adecuadas.</p>"},{"location":"spring_modulith_part_2/#conceptos-importantes","title":"Conceptos importantes:","text":""},{"location":"spring_modulith_part_2/#que-son-los-dtos-data-transfer-objects","title":"\u00bfQu\u00e9 son los DTOs (Data Transfer Objects)?","text":"<p>Definici\u00f3n clara: Los DTOs son objetos simples que empaquetan datos para transferirlos entre diferentes capas de la aplicaci\u00f3n, como entre el cliente y el servidor. Act\u00faan como contratos que definen exactamente qu\u00e9 datos se intercambian en cada operaci\u00f3n.</p> <p>\u00bfPor qu\u00e9 usar records como DTOs?</p> <ul> <li>Son inmutables: una vez creados, no pueden modificarse</li> <li>Proporcionan autom\u00e1ticamente: equals(), hashCode(), toString() y un constructor adecuado</li> <li>Son concisos: requieren mucho menos c\u00f3digo que clases tradicionales</li> </ul> <p>\u00bfPor qu\u00e9 definirlos como records internos?</p> <ul> <li>Encapsulaci\u00f3n: est\u00e1n estrechamente relacionados con las operaciones del controlador</li> <li>Organizaci\u00f3n: mantienes juntos el endpoint y los datos que espera recibir</li> <li>Facilidad de mantenimiento: cuando cambias un endpoint, ves inmediatamente qu\u00e9 datos afecta</li> </ul>"},{"location":"spring_modulith_part_2/#que-codigos-http-usar","title":"\u00bfQu\u00e9 c\u00f3digos HTTP usar?","text":"<ul> <li>201 Created: Cuando creas un nuevo recurso exitosamente</li> <li>200 OK: Cuando obtienes o actualizas un recurso exitosamente y devuelves datos</li> <li>204 No Content: Cuando la operaci\u00f3n es exitosa pero no hay datos que devolver</li> <li>404 Not Found: Cuando el recurso solicitado no existe</li> <li>400 Bad Request: Cuando la petici\u00f3n contiene datos inv\u00e1lidos</li> <li>403 Forbidden: Cuando el usuario no tiene permisos para acceder al recurso</li> <li>500 Internal Server Error: Cuando ocurre un error inesperado en el servidor</li> </ul>"},{"location":"spring_modulith_part_2/#implementacion-paso-a-paso_2","title":"Implementaci\u00f3n paso a paso","text":"<pre><code>// src/main/java/com/geovannycode/store/products/command/ProductCommandController.java\npackage com.geovannycode.store.products.command;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.math.BigDecimal;\nimport java.net.URI;\n\n/**\n * REST Controller para operaciones de comando de productos.\n * \n * \u00bfPor qu\u00e9 package-private?\n * - Solo necesita ser accesible desde el framework web (Spring)\n * - Otros m\u00f3dulos no deber\u00edan llamar directamente a controllers\n * - La comunicaci\u00f3n entre m\u00f3dulos debe ser v\u00eda eventos\n */\n@RestController                 // Spring maneja las peticiones HTTP\n@RequestMapping(\"/api/products\") // Todas las URLs empiezan con /api/products\n@RequiredArgsConstructor        // Inyecci\u00f3n de dependencias por constructor\nclass ProductCommandController {\n\n    private final ProductCommandService commandService;\n\n    /**\n     * POST /api/products\n     * Crea un nuevo producto.\n     * \n     * \u00bfPor qu\u00e9 devolver el ID?\n     * - El cliente necesita saber el ID del producto creado\n     * - Puede usarlo para hacer m\u00e1s operaciones (agregar reviews, etc.)\n     * \n     * \u00bfPor qu\u00e9 ResponseEntity en lugar de solo ProductIdentifier?\n     * - Permite controlar el c\u00f3digo de estado HTTP (201 Created)\n     * - Permite agregar headers como Location\n     * - M\u00e1s control sobre la respuesta HTTP\n     */\n    @PostMapping\n    ResponseEntity&lt;ProductIdentifier&gt; createProduct(@RequestBody CreateProductRequest request) {\n        // Delegar al servicio\n        var id = commandService.createProduct(\n            request.name(), request.description(), request.price(), \n            request.stock(), request.category()\n        );\n\n        // Devolver 201 Created con Location header\n        return ResponseEntity\n            .created(URI.create(\"/api/products/\" + id.id()))  // Header Location\n            .body(id);                                        // Cuerpo de respuesta\n    }\n\n    /**\n     * PUT /api/products/{id}\n     * Actualiza un producto existente.\n     * \n     * \u00bfPor qu\u00e9 PUT y no PATCH?\n     * - PUT reemplaza el objeto completo\n     * - PATCH actualiza solo campos espec\u00edficos\n     * - Usamos PUT porque enviamos todos los campos\n     * \n     * \u00bfPor qu\u00e9 ResponseEntity&lt;Void&gt;?\n     * - No necesitamos devolver datos\n     * - Solo confirmamos que se actualiz\u00f3\n     * - 204 No Content es el c\u00f3digo apropiado\n     */\n    @PutMapping(\"/{id}\")\n    ResponseEntity&lt;Void&gt; updateProduct(@PathVariable ProductIdentifier id,\n                                     @RequestBody UpdateProductRequest request) {\n        commandService.updateProduct(\n            id, request.name(), request.description(), request.price(),\n            request.stock(), request.category()\n        );\n\n        return ResponseEntity.noContent().build(); // 204 No Content\n    }\n\n    /**\n     * POST /api/products/{id}/reviews\n     * Agrega un review a un producto.\n     * \n     * \u00bfPor qu\u00e9 POST y no PUT?\n     * - Estamos CREANDO un nuevo review\n     * - POST es para crear recursos\n     * - PUT es para actualizar recursos existentes\n     */\n    @PostMapping(\"/{id}/reviews\")\n    ResponseEntity&lt;ReviewIdentifier&gt; addReview(@PathVariable ProductIdentifier id,\n                                             @RequestBody AddReviewRequest request) {\n        var review = commandService.addReview(id, request.vote(), request.comment());\n        var reviewId = review.getId();\n\n        return ResponseEntity\n            .created(URI.create(\"/api/products/\" + id.id() + \"/reviews/\" + reviewId.id()))\n            .body(reviewId);\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#dtos","title":"DTOs","text":"<p>Los DTOs han sido extra\u00eddos a sus propios archivos para mejorar la organizaci\u00f3n y mantenibilidad:</p> <pre><code>// src/main/java/com/geovannycode/store/products/dto/command/CreateProductRequest.java\npackage com.geovannycode.store.products.dto.command;\n\n    // ===============================================\n    // DTOs como records internos\n    // ===============================================\n\n    /**\n     * DTO para crear productos.\n     * \n     * \u00bfPor qu\u00e9 un record?\n     * - Inmutable: no se puede cambiar despu\u00e9s de crear\n     * - Autom\u00e1tico: equals(), hashCode(), toString() gratis\n     * - Conciso: menos c\u00f3digo que una clase normal\n     * \n     * \u00bfPor qu\u00e9 interno?\n     * - Solo este controller lo necesita\n     * - No contamina el namespace global\n     * - Cambios no afectan otras clases\n     */\n    record CreateProductRequest(\n        String name, \n        String description, \n        BigDecimal price, \n        Integer stock,\n        String category\n    ) {}\n</code></pre> <pre><code>// src/main/java/com/geovannycode/store/products/dto/command/UpdateProductRequest.java\npackage com.geovannycode.store.products.dto.command;\n\n    /**\n     * DTO para actualizar productos.\n     * \n     * \u00bfPor qu\u00e9 separado de CreateProductRequest?\n     * - Podr\u00edan tener validaciones diferentes\n     * - Podr\u00edan evolucionar independientemente\n     * - M\u00e1s claro qu\u00e9 operaci\u00f3n est\u00e1s haciendo\n     */\n    record UpdateProductRequest(\n        String name, \n        String description, \n        BigDecimal price, \n        Integer stock,\n        String category\n    ) {}\n</code></pre> <pre><code>// src/main/java/com/geovannycode/store/products/dto/command/AddReviewRequest.java\npackage com.geovannycode.store.products.dto.command;\n    /**\n     * DTO para agregar reviews.\n     * \n     * \u00bfPor qu\u00e9 no incluir el productId?\n     * - Ya viene en la URL: /api/products/{id}/reviews\n     * - No repetir informaci\u00f3n\n     * - URL es la fuente de verdad para el ID\n     */\n    record AddReviewRequest(Integer vote, String comment) {}\n</code></pre>"},{"location":"spring_modulith_part_2/#como-maneja-spring-las-peticiones","title":"\u00bfC\u00f3mo maneja Spring las peticiones?","text":"<ol> <li>Petici\u00f3n HTTP llega \u2192 <code>POST /api/products</code> con un JSON en el cuerpo</li> <li>Spring mapea la URL \u2192 Encuentra el m\u00e9todo con <code>@PostMapping</code> sin par\u00e1metros adicionales</li> <li>Convierte el JSON \u2192 Usa Jackson para crear un objeto <code>CreateProductRequest</code></li> <li>Llama al m\u00e9todo \u2192 Ejecuta <code>createProduct(request)</code> con el objeto convertido</li> <li>Procesa la respuesta \u2192 Convierte el <code>ResponseEntity&lt;ProductIdentifier&gt;</code> en una respuesta HTTP:<ul> <li>Status: 201 Created</li> <li>Header: Location: /api/products/123</li> <li>Body: {\"id\":\"123\"} (o el formato que tenga ProductIdentifier)</li> </ul> </li> </ol>"},{"location":"spring_modulith_part_2/#lado-query-modelos-optimizados-para-lectura","title":"Lado Query - Modelos Optimizados para Lectura","text":""},{"location":"spring_modulith_part_2/#que-es-el-lado-query-en-cqrs","title":"\u00bfQu\u00e9 es el lado Query en CQRS?","text":"<p>Definici\u00f3n: La parte especializada en proporcionar datos optimizados para lectura, dise\u00f1ada para responder consultas de manera r\u00e1pida y eficiente.</p> <p>Diferencia con Command:</p> <ul> <li>Command: Se enfoca en validar y procesar cambios manteniendo la consistencia del dominio</li> <li>Query: Se optimiza para leer datos r\u00e1pidamente, sin preocuparse por validaciones complejas</li> </ul> <p>Caracter\u00edsticas principales:</p> <ul> <li>Utiliza modelos desnormalizados (datos redundantes)</li> <li>Se optimiza para patrones de consulta espec\u00edficos</li> <li>Trabaja exclusivamente en modo lectura</li> <li>Puede contener datos pre-calculados para evitar c\u00e1lculos en tiempo real</li> </ul>"},{"location":"spring_modulith_part_2/#arquitectura-del-lado-query","title":"Arquitectura del Lado Query","text":"<p>En aplicaciones empresariales con CQRS, es recomendable seguir una arquitectura en capas:</p> <pre><code>Controller \u2192 Service \u2192 Repository\n     \u2193\n    DTOs\n</code></pre> <p>Esta estructura permite una clara separaci\u00f3n de responsabilidades y facilita el mantenimiento a largo plazo.</p>"},{"location":"spring_modulith_part_2/#productview-el-modelo-de-lectura","title":"ProductView - El Modelo de Lectura","text":""},{"location":"spring_modulith_part_2/#por-que-necesitamos-un-modelo-separado","title":"\u00bfPor qu\u00e9 necesitamos un modelo separado?","text":"<p>La principal raz\u00f3n es la eficiencia en las consultas. Usando un ejemplo concreto:</p> <p>Problema con usar el modelo de dominio (Product) para consultas: <pre><code>// \u274c INEFICIENTE: Para mostrar productos con rating promedio\npublic List&lt;ProductSummary&gt; getProductsWithRating() {\n    List&lt;Product&gt; products = productRepository.findAll();\n    return products.stream().map(product -&gt; {\n        // Para cada producto, calcular rating promedio\n        double average = product.getReviews().stream()\n            .mapToInt(Review::getVote)\n            .average()\n            .orElse(0.0);\n        return new ProductSummary(product.getName(), average);\n    }).collect(toList());\n    // Esto es LENTO si tienes muchos productos\n}\n</code></pre></p> <p>Este enfoque tiene problemas:</p> <ol> <li>Carga TODOS los productos con sus rese\u00f1as en memoria</li> <li>Realiza c\u00e1lculos para CADA producto cada vez que se consulta</li> <li>Se vuelve exponencialmente m\u00e1s lento con m\u00e1s productos y rese\u00f1as</li> </ol> <p>Soluci\u00f3n con ProductView: <pre><code>// \u2705 R\u00c1PIDO: Rating ya est\u00e1 calculado y guardado\npublic List&lt;ProductView&gt; getProductsByRating() {\n    return repository.findAllOrderByRatingDesc(); // Una sola query SQL\n}\n</code></pre></p> <p>Ventajas:</p> <ol> <li>Ejecuta una sola consulta SQL optimizada</li> <li>Los c\u00e1lculos ya est\u00e1n hechos previamente</li> <li>Escala bien con grandes vol\u00famenes de datos</li> </ol>"},{"location":"spring_modulith_part_2/#implementacion-de-productview","title":"Implementaci\u00f3n de ProductView","text":"<pre><code>// src/main/java/com/geovannycode/store/products/query/ProductView.java\npackage com.geovannycode.store.products.query;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport com.geovannycode.store.products.command.ProductEvents.ProductReviewed;\nimport lombok.AccessLevel;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.jmolecules.architecture.cqrs.QueryModel;\nimport org.jmolecules.ddd.types.AggregateRoot;\n\nimport java.math.BigDecimal;\n\n/**\n * Modelo de lectura optimizado para consultas.\n * \n * \u00bfPor qu\u00e9 implementar AggregateRoot aqu\u00ed tambi\u00e9n?\n * - jMolecules genera autom\u00e1ticamente las anotaciones JPA\n * - Nos da @Entity, @Table, @Id sin escribirlas manualmente\n * - Es agreggate desde perspectiva de queries, no de comandos\n * \n */\n@Getter                    // Getters para todos los campos\n@Setter                    // Setters normales para campos b\u00e1sicos\n@QueryModel               // Marca como modelo de query CQRS\nclass ProductView implements AggregateRoot&lt;ProductView, ProductIdentifier&gt; {\n\n    // Campos b\u00e1sicos replicados del lado comando\n    private ProductIdentifier id;\n    private String name, description, category;\n    private BigDecimal price;\n    private Integer stock;\n\n    // Campos desnormalizados para consultas eficientes\n    // @Setter(AccessLevel.NONE) = solo se pueden cambiar con m\u00e9todos espec\u00edficos\n    @Setter(AccessLevel.NONE) \n    private Double averageRating = 0.0;\n\n    @Setter(AccessLevel.NONE) \n    private Integer reviewCount = 0;\n\n    /**\n     * Procesa un evento ProductReviewed para actualizar estad\u00edsticas.\n     * \n     * \u00bfC\u00f3mo funciona el c\u00e1lculo incremental?\n     * - Promedio actual = suma total / cantidad reviews\n     * - Suma total = promedio actual * cantidad reviews\n     * - Nueva suma = suma total + nuevo voto\n     * - Nuevo promedio = nueva suma / (cantidad + 1)\n     * \n     * \u00bfPor qu\u00e9 incremental en lugar de recalcular todo?\n     * - Mucho m\u00e1s r\u00e1pido (O(1) vs O(n))\n     * - No necesita cargar todos los reviews\n     * - Escala bien con millones de reviews\n     */\n    public ProductView on(ProductReviewed event) {\n        // Calcular nueva suma total\n        double currentTotal = averageRating * reviewCount;\n\n        // Actualizar contadores\n        this.reviewCount = reviewCount + 1;\n\n        // Calcular nuevo promedio\n        this.averageRating = (currentTotal + event.vote()) / reviewCount;\n\n        return this;  // Para poder hacer: repository.save(view.on(event))\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#explicacion","title":"Explicaci\u00f3n:","text":"<ol> <li> <p>@QueryModel: Esta anotaci\u00f3n de jMolecules marca la clase como un modelo espec\u00edfico para consultas en CQRS. Es principalmente documentativa.</p> </li> <li> <p>AggregateRoot: Aunque normalmente se asocia con el lado Command, aqu\u00ed se implementa porque jMolecules lo utiliza para generar autom\u00e1ticamente las anotaciones JPA (@Entity, @Table, @Id).</p> </li> <li> <p>Campos desnormalizados:</p> <ul> <li><code>averageRating</code>: Almacena el promedio de calificaciones pre-calculado</li> <li><code>reviewCount</code>: Guarda la cantidad de rese\u00f1as para no tener que contarlas</li> </ul> </li> <li> <p>M\u00e9todo on(ProductReviewed):</p> <ul> <li>Implementa un c\u00e1lculo incremental del promedio</li> <li>Evita tener que recalcular desde cero cada vez</li> <li>Es mucho m\u00e1s eficiente (O(1) vs O(n)) que recalcular con todas las rese\u00f1as</li> </ul> </li> </ol>"},{"location":"spring_modulith_part_2/#producteventhandler-sincronizacion-asincrona","title":"ProductEventHandler - Sincronizaci\u00f3n As\u00edncrona","text":"<p>Esta clase es crucial para mantener actualizado el modelo de lectura basado en eventos del lado Command.</p>"},{"location":"spring_modulith_part_2/#que-es-applicationmodulelistener","title":"\u00bfQu\u00e9 es @ApplicationModuleListener?","text":"<p>Definici\u00f3n: Es una anotaci\u00f3n de Spring Modulith que marca un m\u00e9todo para escuchar eventos de otros m\u00f3dulos y procesarlos de forma as\u00edncrona.</p>"},{"location":"spring_modulith_part_2/#flujo-completo","title":"Flujo completo:","text":"<ol> <li>Un <code>CommandService</code> publica un evento (ej: <code>ProductCreated</code>)</li> <li>Spring Modulith detecta este evento y busca m\u00e9todos anotados con <code>@ApplicationModuleListener</code></li> <li>Ejecuta el m\u00e9todo correspondiente en una transacci\u00f3n separada</li> <li>Si el procesamiento falla, puede reintentar autom\u00e1ticamente m\u00e1s tarde</li> </ol>"},{"location":"spring_modulith_part_2/#ventajas-de-este-enfoque-asincrono","title":"Ventajas de este enfoque as\u00edncrono:","text":"<ul> <li>Desacoplamiento: El comando completa sin esperar a que se actualice la vista</li> <li>Resiliencia: Si falla la actualizaci\u00f3n de la vista, el comando ya est\u00e1 confirmado</li> <li>Rendimiento: No se bloquea la respuesta al usuario mientras se actualizan las vistas</li> <li>Escalabilidad: Permite escalar independientemente los lados de comando y consulta</li> </ul>"},{"location":"spring_modulith_part_2/#implementacion-paso-a-paso_3","title":"Implementaci\u00f3n paso a paso","text":"<pre><code>// src/main/java/com/geovannycode/store/products/query/ProductEventHandler.java\npackage com.geovannycode.store.products.query;\n\nimport com.geovannycode.store.products.command.ProductEvents.ProductCreated;\nimport com.geovannycode.store.products.command.ProductEvents.ProductReviewed;\nimport com.geovannycode.store.products.command.ProductEvents.ProductUpdated;\nimport lombok.RequiredArgsConstructor;\nimport org.jmolecules.event.annotation.DomainEventHandler;\nimport org.springframework.modulith.events.ApplicationModuleListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * Maneja eventos de dominio para mantener sincronizada la vista de productos.\n * \n * \u00bfPor qu\u00e9 @Component y no @Service?\n * - @Service implica l\u00f3gica de negocio\n * - Esto es m\u00e1s bien un \"adaptador\" entre eventos y vistas\n * - @Component es m\u00e1s gen\u00e9rico y apropiado\n * \n * \u00bfQu\u00e9 es @DomainEventHandler?\n * - Documenta que esta clase maneja eventos de dominio\n * - Mejora la legibilidad del c\u00f3digo\n * - Herramientas pueden usar esta informaci\u00f3n\n */\n@Component                // Spring maneja esta clase\n@RequiredArgsConstructor  // Constructor con dependencias finales\nclass ProductEventHandler {\n\n    private final ProductViewRepository viewRepository;\n\n    /**\n     * Crea una nueva vista cuando se crea un producto.\n     * \n     * \u00bfQu\u00e9 hace @ApplicationModuleListener?\n     * - Escucha eventos ProductCreated de cualquier m\u00f3dulo\n     * - Ejecuta este m\u00e9todo as\u00edncronamente\n     * - En su propia transacci\u00f3n (independiente del comando)\n     * - Con retry autom\u00e1tico si falla\n     * \n     * \u00bfPor qu\u00e9 @DomainEventHandler?\n     * - Documenta la intenci\u00f3n del m\u00e9todo\n     * - Mejora la comprensi\u00f3n del c\u00f3digo\n     * - Consistente con jMolecules CQRS\n     */\n    @DomainEventHandler\n    @ApplicationModuleListener\n    void on(ProductCreated event) {\n        // Crear nueva vista con datos del evento\n        var view = new ProductView();\n        view.setId(event.id());\n        view.setName(event.name());\n        view.setDescription(event.description());\n        view.setPrice(event.price());\n        view.setStock(event.stock());\n        view.setCategory(event.category());\n\n        // Guardar en la base de datos de queries\n        viewRepository.save(view);\n    }\n\n    /**\n     * Actualiza vista cuando se actualiza un producto.\n     * \n     * \u00bfPor qu\u00e9 ifPresent() en lugar de orElseThrow()?\n     * - Eventos pueden llegar fuera de orden\n     * - El producto podr\u00eda no existir a\u00fan en la vista\n     * - Es mejor ser resiliente que fallar\n     */\n    @DomainEventHandler\n    @ApplicationModuleListener\n    void on(ProductUpdated event) {\n        viewRepository.findById(event.id()).ifPresent(view -&gt; {\n            // Actualizar todos los campos b\u00e1sicos\n            view.setName(event.name());\n            view.setDescription(event.description());\n            view.setPrice(event.price());\n            view.setStock(event.stock());\n            view.setCategory(event.category());\n\n            // Guardar cambios\n            viewRepository.save(view);\n        });\n    }\n\n    /**\n     * Actualiza estad\u00edsticas cuando se agrega review.\n     * \n     * \u00bfPor qu\u00e9 usar map() y ifPresent()?\n     * - Programaci\u00f3n funcional: m\u00e1s expresiva\n     * - Evita if/else anidados\n     * - Manejo autom\u00e1tico de casos nulos\n     */\n    @ApplicationModuleListener\n    void on(ProductReviewed event) {\n        viewRepository.findById(event.productId())\n            .map(it -&gt; it.on(event))        // Actualizar estad\u00edsticas\n            .ifPresent(viewRepository::save); // Guardar si existe\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#que-pasa-si-falla-un-evento","title":"\u00bfQu\u00e9 pasa si falla un evento?","text":"<p>Spring Modulith implementa un mecanismo robusto para garantizar la consistencia eventual:</p> <ol> <li>Guarda el evento en la tabla <code>event_publication</code> de la base de datos</li> <li>Al reiniciar la aplicaci\u00f3n, intenta republicar autom\u00e1ticamente los eventos pendientes</li> <li>Se puede configurar estrategias de reintento con backoff exponencial</li> <li>Los eventos procesados exitosamente se mueven a <code>event_publication_archive</code> para auditor\u00eda</li> </ol>"},{"location":"spring_modulith_part_2/#repository-de-query-consultas-optimizadas","title":"Repository de Query - Consultas Optimizadas","text":""},{"location":"spring_modulith_part_2/#por-que-metodos-de-query-especificos","title":"\u00bfPor qu\u00e9 m\u00e9todos de query espec\u00edficos?","text":"<p>Comparemos una consulta gen\u00e9rica con una espec\u00edfica:</p> <p>Ejemplo de query gen\u00e9rica vs espec\u00edfica:</p> <pre><code>// \u274c INEFICIENTE: Query gen\u00e9rica\npublic List&lt;ProductView&gt; getProductsByRating() {\n    return repository.findAll()  // Trae TODOS los productos\n        .stream()\n        .filter(p -&gt; p.getReviewCount() &gt; 0)  // Filtra en memoria\n        .sorted((a, b) -&gt; b.getAverageRating().compareTo(a.getAverageRating()))  // Ordena en memoria\n        .collect(toList());\n}\n\n// \u2705 EFICIENTE: Query espec\u00edfica  \n@Query(\"SELECT pv FROM ProductView pv WHERE pv.reviewCount &gt; 0 ORDER BY pv.averageRating DESC\")\nList&lt;ProductView&gt; findAllOrderByRatingDesc();\n</code></pre>"},{"location":"spring_modulith_part_2/#implementacion-del-repository-de-query","title":"Implementaci\u00f3n del Repository de Query","text":"<pre><code>// src/main/java/com/geovannycode/store/products/query/ProductViewRepository.java\npackage com.geovannycode.store.products.query;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.ListCrudRepository;\n\nimport java.math.BigDecimal;\nimport java.util.List;\n\n/**\n * Repository para consultar vistas de productos.\n * \n * \u00bfPor qu\u00e9 ListCrudRepository y no CrudRepository?\n * - findAll() devuelve List en lugar de Iterable\n * - M\u00e1s conveniente para la mayor\u00eda de casos de uso\n * - Evita conversiones manuales\n */\ninterface ProductViewRepository extends ListCrudRepository&lt;ProductView, ProductIdentifier&gt; {\n\n    /**\n     * Encuentra productos por categor\u00eda.\n     * \n     * \u00bfC\u00f3mo sabe Spring qu\u00e9 SQL generar?\n     * - Lee el nombre del m\u00e9todo: findByCategory\n     * - \"findBy\" + \"Category\" = WHERE category = ?\n     * - Genera autom\u00e1ticamente: SELECT * FROM product_view WHERE category = ?\n     */\n    List&lt;ProductView&gt; findByCategory(String category);\n\n    /**\n     * Encuentra productos dentro de rango de precios.\n     * \n     * \u00bfPor qu\u00e9 @Query manual en lugar de m\u00e9todo generado?\n     * - Spring no puede generar autom\u00e1ticamente BETWEEN\n     * - M\u00e1s control sobre la query exacta\n     * - Mejor performance para queries complejas\n     */\n    @Query(\"SELECT pv FROM ProductView pv WHERE pv.price BETWEEN :minPrice AND :maxPrice\")\n    List&lt;ProductView&gt; findByPriceRange(BigDecimal minPrice, BigDecimal maxPrice);\n\n    /**\n     * Encuentra productos ordenados por rating.\n     * \n     * \u00bfPor qu\u00e9 filtrar reviewCount &gt; 0?\n     * - Productos sin reviews tienen rating 0.0\n     * - No tiene sentido mostrarlos en \"mejores calificados\"\n     * - Mejor experiencia de usuario\n     * \n     * \u00bfPor qu\u00e9 ORDER BY averageRating DESC?\n     * - DESC = descendente (mayor a menor)\n     * - Los mejor calificados aparecen primero\n     * - Es lo que esperan los usuarios\n     */\n    @Query(\"SELECT pv FROM ProductView pv WHERE pv.reviewCount &gt; 0 ORDER BY pv.averageRating DESC\")\n    List&lt;ProductView&gt; findAllOrderByRatingDesc();\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#1-crear-interfaz-del-servicio","title":"1. Crear interfaz del servicio","text":"<pre><code>// src/main/java/com/geovannycode/store/products/query/ProductQueryService.java\npackage com.geovannycode.store.products.query;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * Servicio para consultas de productos.\n */\npublic interface ProductQueryService {\n    List&lt;ProductView&gt; findAllProducts();\n    Optional&lt;ProductView&gt; findProductById(ProductIdentifier id);\n    List&lt;ProductView&gt; findProductsByCategory(String category);\n    List&lt;ProductView&gt; findProductsByPriceRange(BigDecimal min, BigDecimal max);\n    List&lt;ProductView&gt; findProductsOrderedByRating();\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#2-implementar-el-servicio","title":"2. Implementar el servicio","text":"<pre><code>// src/main/java/com/geovannycode/store/products/query/ProductQueryServiceImpl.java\npackage com.geovannycode.store.products.query;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport lombok.RequiredArgsConstructor;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\n@Transactional(readOnly = true)\n@RequiredArgsConstructor\nclass ProductQueryServiceImpl implements ProductQueryService {\n\n    private final ProductViewRepository repository;\n\n    @Override\n    public List&lt;ProductView&gt; findAllProducts() {\n        return repository.findAll();\n    }\n\n    @Override\n    public Optional&lt;ProductView&gt; findProductById(ProductIdentifier id) {\n        return repository.findById(id);\n    }\n\n    @Override\n    public List&lt;ProductView&gt; findProductsByCategory(String category) {\n        return repository.findByCategory(category);\n    }\n\n    @Override\n    public List&lt;ProductView&gt; findProductsByPriceRange(BigDecimal min, BigDecimal max) {\n        return repository.findByPriceRange(min, max);\n    }\n\n    @Override\n    public List&lt;ProductView&gt; findProductsOrderedByRating() {\n        return repository.findAllOrderByRatingDesc();\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#controller-de-query-apis-de-lectura","title":"Controller de Query - APIs de Lectura","text":""},{"location":"spring_modulith_part_2/#implementacion-del-controller-de-query","title":"Implementaci\u00f3n del Controller de Query","text":"<pre><code>// src/main/java/com/geovannycode/store/products/query/ProductViewController.java\npackage com.geovannycode.store.products.query;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.math.BigDecimal;\nimport java.util.List;\n\n/**\n * REST Controller para operaciones de consulta de productos.\n * \n * \u00bfPor qu\u00e9 separar de ProductCommandController?\n * - Diferentes responsabilidades (lectura vs escritura)\n * - Pueden evolucionar independientemente\n * - M\u00e1s f\u00e1cil aplicar cach\u00e9 solo a queries\n * - Mejor para equipos especializados\n */\n@RestController\n@RequestMapping(\"/api/products\")\n@RequiredArgsConstructor\nclass ProductViewController {\n\n    private final ProductViewRepository repository;\n\n    /**\n     * GET /api/products\n     * Obtiene todos los productos.\n     * \n     * \u00bfPor qu\u00e9 List en lugar de ResponseEntity&lt;List&gt;?\n     * - Spring convierte autom\u00e1ticamente a JSON\n     * - 200 OK es el c\u00f3digo por defecto\n     * - Menos c\u00f3digo para casos simples\n     */\n    @GetMapping\n    List&lt;ProductView&gt; getAllProducts() {\n        return repository.findAll();\n    }\n\n    /**\n     * GET /api/products/{id}\n     * Obtiene un producto espec\u00edfico.\n     * \n     * \u00bfPor qu\u00e9 ResponseEntity.of(Optional)?\n     * - Si existe: 200 OK con el producto\n     * - Si no existe: 404 Not Found autom\u00e1ticamente\n     * - Una l\u00ednea en lugar de if/else\n     */\n    @GetMapping(\"/{id}\")\n    ResponseEntity&lt;ProductView&gt; getProductById(@PathVariable ProductIdentifier id) {\n        return ResponseEntity.of(repository.findById(id));\n    }\n\n    /**\n     * GET /api/products/by-category?category=Electronics\n     * Obtiene productos por categor\u00eda.\n     * \n     * \u00bfPor qu\u00e9 @RequestParam en lugar de @PathVariable?\n     * - M\u00e1s flexible: /api/products/by-category?category=Electronics\n     * - Permite m\u00faltiples par\u00e1metros: ?category=Electronics&amp;minPrice=100\n     * - Mejor para filtros opcionales\n     */\n    @GetMapping(\"/by-category\")\n    List&lt;ProductView&gt; getProductsByCategory(@RequestParam String category) {\n        return repository.findByCategory(category);\n    }\n\n    /**\n     * GET /api/products/by-price?min=100&amp;max=500\n     * Obtiene productos en rango de precios.\n     */\n    @GetMapping(\"/by-price\")\n    List&lt;ProductView&gt; getProductsByPriceRange(@RequestParam BigDecimal min, \n                                            @RequestParam BigDecimal max) {\n        return repository.findByPriceRange(min, max);\n    }\n\n    /**\n     * GET /api/products/by-rating\n     * Obtiene productos ordenados por rating.\n     * \n     * \u00bfPor qu\u00e9 una URL espec\u00edfica?\n     * - Es una consulta com\u00fan y importante\n     * - Merece su propia URL para cach\u00e9\n     * - F\u00e1cil de recordar y usar\n     */\n    @GetMapping(\"/by-rating\")\n    List&lt;ProductView&gt; getProductsByRating() {\n        return repository.findAllOrderByRatingDesc();\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#testing-independiente-de-modulos","title":"Testing Independiente de M\u00f3dulos","text":""},{"location":"spring_modulith_part_2/#por-que-testing-independiente","title":"\u00bfPor qu\u00e9 Testing Independiente?","text":"<p>Problema con @SpringBootTest tradicional: <pre><code>@SpringBootTest  // Carga TODA la aplicaci\u00f3n\nclass ProductTest {\n    // Este test es LENTO porque:\n    // - Carga todos los m\u00f3dulos (products, orders, inventory, etc.)\n    // - Inicializa todas las dependencias\n    // - Si falla orders, este test tambi\u00e9n puede fallar\n}\n</code></pre></p> <p>Soluci\u00f3n con @ApplicationModuleTest: <pre><code>@ApplicationModuleTest  // Carga SOLO el m\u00f3dulo products\nclass ProductTest {\n    // Este test es R\u00c1PIDO porque:\n    // - Solo carga el m\u00f3dulo bajo test\n    // - Dependencias m\u00ednimas\n    // - Aislado de problemas en otros m\u00f3dulos\n}\n</code></pre></p>"},{"location":"spring_modulith_part_2/#conceptos-de-testing-que-vamos-a-usar","title":"Conceptos de Testing que Vamos a Usar","text":""},{"location":"spring_modulith_part_2/#que-es-applicationmoduletest","title":"\u00bfQu\u00e9 es @ApplicationModuleTest?","text":"<ul> <li>Carga solo el m\u00f3dulo especificado</li> <li>Usa TestContainers para base de datos real</li> <li>Permite verificar eventos publicados</li> <li>Tests m\u00e1s r\u00e1pidos que @SpringBootTest completo</li> </ul>"},{"location":"spring_modulith_part_2/#que-es-testcontainers","title":"\u00bfQu\u00e9 es TestContainers?","text":"<p>Definici\u00f3n simple: Levanta una base de datos PostgreSQL real para cada test \u00bfPor qu\u00e9 no H2 en memoria?: PostgreSQL en test = PostgreSQL en producci\u00f3n (m\u00e1s confiable)</p>"},{"location":"spring_modulith_part_2/#que-es-publishedevents","title":"\u00bfQu\u00e9 es PublishedEvents?","text":"<ul> <li>Spring Modulith captura autom\u00e1ticamente los eventos publicados durante el test</li> <li>Puedes verificar qu\u00e9 eventos se publicaron</li> <li>Puedes verificar los datos del evento</li> </ul>"},{"location":"spring_modulith_part_2/#que-es-scenario","title":"\u00bfQu\u00e9 es Scenario?","text":"<ul> <li>Para tests as\u00edncronos con eventos</li> <li>Publica un evento y espera a que se procese</li> <li>Verifica el estado resultante</li> </ul>"},{"location":"spring_modulith_part_2/#test-del-command-service","title":"Test del Command Service","text":"<pre><code>// src/test/java/com/geovannycode/store/products/command/ProductCommandServiceTest.java\npackage com.geovannycode.store.products.command;\n\nimport static org.assertj.core.api.Assertions.*;\n\nimport lombok.RequiredArgsConstructor;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.modulith.test.ApplicationModuleTest;\nimport org.springframework.modulith.test.PublishedEvents;\n\nimport java.math.BigDecimal;\nimport java.util.UUID;\n\n/**\n * Test de integraci\u00f3n para el m\u00f3dulo de comando de products.\n * \n * \u00bfQu\u00e9 hace @ApplicationModuleTest?\n * 1. Carga SOLO el m\u00f3dulo 'products'\n * 2. Levanta PostgreSQL real con TestContainers\n * 3. Permite verificar eventos publicados\n * 4. Tests m\u00e1s r\u00e1pidos que @SpringBootTest\n * \n * \u00bfPor qu\u00e9 @RequiredArgsConstructor en un test?\n * - Spring inyecta autom\u00e1ticamente las dependencias\n * - M\u00e1s limpio que @Autowired en cada campo\n * - Consistente con el resto del c\u00f3digo\n */\n@ApplicationModuleTest\n@RequiredArgsConstructor\nclass ProductCommandServiceTest {\n\n    // Spring inyecta estas dependencias autom\u00e1ticamente\n    private final ProductCommandService productCommandService;\n    private final ProductRepository productRepository;\n\n    /**\n     * Test: Crear producto deber\u00eda guardarlo en base de datos.\n     * \n     * \u00bfQu\u00e9 verifica este test?\n     * 1. El servicio acepta los par\u00e1metros correctamente\n     * 2. Devuelve un ID v\u00e1lido\n     * 3. Guarda el producto en la base de datos\n     * 4. Los datos guardados son correctos\n     */\n    @Test\n    void testAddProduct() {\n        // Arrange: Preparar datos de entrada\n        String name = \"Test Product\";\n        String description = \"Test Product Description\";\n        BigDecimal price = BigDecimal.ONE;\n        Integer stock = 100;\n        String category = \"Test Category\";\n\n        // Act: Ejecutar la operaci\u00f3n\n        var productId = productCommandService.createProduct(name, description, price, stock, category);\n\n        // Assert: Verificar resultados\n        assertThat(productId.id()).isNotNull();\n\n        // Verificar que se guard\u00f3 en la base de datos\n        assertThat(productRepository.findById(productId)).hasValueSatisfying(product -&gt; {\n            assertThat(product.getName()).isEqualTo(name);\n            assertThat(product.getDescription()).isEqualTo(description);\n            assertThat(product.getPrice()).isEqualTo(price);\n            assertThat(product.getStock()).isEqualTo(stock);\n            assertThat(product.getCategory()).isEqualTo(category);\n            assertThat(product.getProductReviews()).isEmpty();\n        });\n    }\n\n    /**\n     * Test: Actualizar producto deber\u00eda modificar datos existentes.\n     * \n     * \u00bfPor qu\u00e9 usar UUID hardcodeado?\n     * - Los datos de ejemplo en V1__create_initial_schema.sql tienen IDs espec\u00edficos\n     * - Permite testing con datos predecibles\n     * - En producci\u00f3n, los IDs se generan autom\u00e1ticamente\n     */\n    @Test\n    void testUpdateProduct() {\n        // Arrange: Usar ID de datos de ejemplo\n        var id = new Product.ProductIdentifier(UUID.fromString(\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"));\n\n        // Act: Actualizar el producto\n        productCommandService.updateProduct(\n            id, \"Laptop Pro 2\", \"High performance laptop for true PROs\",\n            new BigDecimal(\"1299.99\"), 25, \"Electronics\"\n        );\n\n        // Assert: Verificar que se actualiz\u00f3\n        assertThat(productRepository.findById(id)).hasValueSatisfying(product -&gt; {\n            assertThat(product.getName()).isEqualTo(\"Laptop Pro 2\");\n            assertThat(product.getDescription()).isEqualTo(\"High performance laptop for true PROs\");\n            assertThat(product.getPrice()).isEqualTo(new BigDecimal(\"1299.99\"));\n            assertThat(product.getStock()).isEqualTo(25);\n        });\n    }\n\n    /**\n     * Test: Agregar review deber\u00eda agregarlo a la lista del producto.\n     * \n     * \u00bfC\u00f3mo verifica que el review se agreg\u00f3 correctamente?\n     * 1. Busca el producto en la base de datos\n     * 2. Filtra la lista de reviews para encontrar el espec\u00edfico\n     * 3. Verifica los datos del review encontrado\n     */\n    @Test\n    void testAddReview() {\n        // Arrange: Usar producto existente\n        var id = new Product.ProductIdentifier(UUID.fromString(\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"));\n\n        // Act: Agregar review\n        var review = productCommandService.addReview(id, 5, \"Great product!\");\n\n        // Assert: Verificar que se agreg\u00f3 al producto\n        assertThat(productRepository.findById(id)).hasValueSatisfying(product -&gt; {\n            var assignedReview = product.getProductReviews().stream()\n                .filter(review::equals)  // Buscar este review espec\u00edfico\n                .findFirst();\n\n            assertThat(assignedReview).hasValueSatisfying(foundReview -&gt; {\n                assertThat(foundReview.getVote()).isEqualTo(5);\n                assertThat(foundReview.getComment()).isEqualTo(\"Great product!\");\n            });\n        });\n    }\n\n    /**\n     * Test: Verificar que se publican eventos correctamente.\n     * \n     * \u00bfQu\u00e9 es PublishedEvents?\n     * - Spring Modulith captura autom\u00e1ticamente eventos durante el test\n     * - Permite verificar qu\u00e9 eventos se publicaron\n     * - Puedes examinar los datos del evento\n     */\n    @Test\n    void testEventsArePublished(PublishedEvents events) {\n        // Arrange\n        String name = \"Event Test Product\";\n        String description = \"Test Description\";\n        BigDecimal price = new BigDecimal(\"99.99\");\n        Integer stock = 50;\n        String category = \"Test\";\n\n        // Act: Crear producto\n        var productId = productCommandService.createProduct(name, description, price, stock, category);\n\n        // Assert: Verificar que se public\u00f3 el evento ProductCreated\n        var productCreatedEvents = events.ofType(ProductEvents.ProductCreated.class);\n\n        assertThat(productCreatedEvents).hasSize(1);\n\n        productCreatedEvents.forEach(event -&gt; {\n            assertThat(event.id()).isEqualTo(productId);\n            assertThat(event.name()).isEqualTo(name);\n            assertThat(event.description()).isEqualTo(description);\n            assertThat(event.price()).isEqualTo(price);\n            assertThat(event.stock()).isEqualTo(stock);\n            assertThat(event.category()).isEqualTo(category);\n        });\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#test-del-event-handler","title":"Test del Event Handler","text":"<pre><code>// src/test/java/com/geovannycode/store/products/query/EventHandlerIntegrationTest.java\npackage com.geovannycode.store.products.query;\n\nimport static org.assertj.core.api.Assertions.*;\n\nimport com.geovannycode.store.products.command.Product.ProductIdentifier;\nimport com.geovannycode.store.products.command.ProductEvents.ProductCreated;\nimport com.geovannycode.store.products.command.ProductEvents.ProductReviewed;\nimport com.geovannycode.store.products.command.ReviewIdentifier;\nimport lombok.RequiredArgsConstructor;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.modulith.test.ApplicationModuleTest;\nimport org.springframework.modulith.test.Scenario;\n\nimport java.math.BigDecimal;\nimport java.util.UUID;\n\n/**\n * Test espec\u00edfico para verificar el manejo de eventos.\n * \n * \u00bfPor qu\u00e9 un test separado para eventos?\n * - Los eventos son as\u00edncronos\n * - Necesitan Scenario para coordinar timing\n * - Verifican integraci\u00f3n entre command y query sides\n */\n@ApplicationModuleTest\n@RequiredArgsConstructor\nclass EventHandlerIntegrationTest {\n\n    private final ProductViewRepository repository;\n\n    /**\n     * Test: Procesar eventos en secuencia.\n     * \n     * \u00bfQu\u00e9 es Scenario?\n     * - Herramienta para tests as\u00edncronos\n     * - Publica evento y espera a que se procese\n     * - Verifica estado resultante\n     * \n     * \u00bfPor qu\u00e9 andWaitForStateChange()?\n     * - Los eventos se procesan as\u00edncronamente\n     * - Necesitamos esperar a que termine el procesamiento\n     * - Evita race conditions en tests\n     */\n    @Test\n    void whenReviewEventIsReceived_thenUpdateProductView(Scenario scenario) {\n        var id = new ProductIdentifier(UUID.randomUUID());\n\n        // Paso 1: Crear vista de producto\n        scenario.publish(new ProductCreated(id, \"test\", \"test\", BigDecimal.TEN, 100, \"test\"))\n            .andWaitForStateChange(() -&gt; repository.findById(id));\n\n        // Paso 2: Agregar review y verificar actualizaci\u00f3n\n        scenario.publish(new ProductReviewed(id, new ReviewIdentifier(UUID.randomUUID()), 5, \"test\"))\n            .andWaitForStateChange(() -&gt; repository.findById(id))\n            .andVerify(view -&gt; assertThat(view).hasValueSatisfying(productView -&gt; {\n                assertThat(productView.getReviewCount()).isEqualTo(1);\n                assertThat(productView.getAverageRating()).isEqualTo(5.0);\n            }));\n    }\n\n    /**\n     * Test: Verificar c\u00e1lculo de promedio con m\u00faltiples reviews.\n     */\n    @Test\n    void testAverageRatingCalculation(Scenario scenario) {\n        var id = new ProductIdentifier(UUID.randomUUID());\n\n        // Crear producto\n        scenario.publish(new ProductCreated(id, \"test\", \"test\", BigDecimal.TEN, 100, \"test\"))\n            .andWaitForStateChange(() -&gt; repository.findById(id));\n\n        // Agregar primer review (5 estrellas)\n        scenario.publish(new ProductReviewed(id, new ReviewIdentifier(UUID.randomUUID()), 5, \"excellent\"))\n            .andWaitForStateChange(() -&gt; repository.findById(id));\n\n        // Agregar segundo review (3 estrellas)\n        scenario.publish(new ProductReviewed(id, new ReviewIdentifier(UUID.randomUUID()), 3, \"ok\"))\n            .andWaitForStateChange(() -&gt; repository.findById(id))\n            .andVerify(view -&gt; assertThat(view).hasValueSatisfying(productView -&gt; {\n                assertThat(productView.getReviewCount()).isEqualTo(2);\n                assertThat(productView.getAverageRating()).isEqualTo(4.0); // (5 + 3) / 2 = 4.0\n            }));\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#test-de-estructura-del-modulo","title":"Test de Estructura del M\u00f3dulo","text":"<pre><code>// src/test/java/com/geovannycode/store/products/ProductsModuleIntegrationTests.java\npackage com.geovannycode.store.products;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.modulith.test.ApplicationModuleTest;\n\n/**\n * Test simple para verificar que el m\u00f3dulo arranca correctamente.\n * \n * \u00bfPara qu\u00e9 sirve un test tan simple?\n * - Verifica que todas las dependencias se resuelven\n * - Confirma que la configuraci\u00f3n es correcta\n * - Detecta problemas de wiring temprano\n * - Es r\u00e1pido y da confianza b\u00e1sica\n */\n@ApplicationModuleTest\nclass ProductsModuleIntegrationTests {\n\n    /**\n     * Si este test pasa, significa que:\n     * - El m\u00f3dulo se puede cargar\n     * - Todas las dependencias est\u00e1n disponibles\n     * - La configuraci\u00f3n de Spring est\u00e1 correcta\n     * - Las entities de JPA est\u00e1n bien definidas\n     */\n    @Test\n    void bootstrapsModule() {\n        // Si llegamos aqu\u00ed, el m\u00f3dulo arranc\u00f3 exitosamente\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#comandos-de-testing-utiles","title":"Comandos de Testing \u00datiles","text":"<pre><code># Ejecutar solo tests del m\u00f3dulo products\n./mvnw test -Dtest=\"com.geovannycode.store.products.**\"\n\n# Ejecutar solo tests de command\n./mvnw test -Dtest=\"*CommandServiceTest\"\n\n# Ejecutar con logs de SQL para debugging\n./mvnw test -Dtest=ProductCommandServiceTest -Dspring.jpa.show-sql=true\n\n# Ver qu\u00e9 contenedores est\u00e1n corriendo durante tests\ndocker ps  # (ejecutar en otra terminal mientras corre el test)\n</code></pre>"},{"location":"spring_modulith_part_2/#proximos-pasos-y-mejoras","title":"Pr\u00f3ximos Pasos y Mejoras","text":""},{"location":"spring_modulith_part_2/#funcionalidades-adicionales-que-puedes-implementar","title":"Funcionalidades Adicionales que Puedes Implementar","text":""},{"location":"spring_modulith_part_2/#1-modulo-de-inventario","title":"1. M\u00f3dulo de Inventario","text":"<pre><code>// src/main/java/com/geovannycode/store/inventory/InventoryService.java\n@ApplicationModuleListener\nvoid on(ProductCreated event) {\n    // Crear stock inicial cuando se crea un producto\n    inventoryRepository.save(new StockEntry(event.id(), event.stock()));\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#2-modulo-de-ordenes","title":"2. M\u00f3dulo de \u00d3rdenes","text":"<pre><code>// Escuchar cuando se hace una orden para reducir stock\n@ApplicationModuleListener  \nvoid on(OrderCreated event) {\n    event.items().forEach(item -&gt; \n        inventoryService.reserveStock(item.productId(), item.quantity())\n    );\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#3-modulo-de-notificaciones","title":"3. M\u00f3dulo de Notificaciones","text":"<pre><code>// Enviar email cuando un producto recibe review malo\n@ApplicationModuleListener\nvoid on(ProductReviewed event) {\n    if (event.vote() &lt;= 2) {\n        emailService.notifyLowRating(event);\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#optimizaciones-de-performance","title":"Optimizaciones de Performance","text":""},{"location":"spring_modulith_part_2/#1-cacheo-de-consultas-frecuentes","title":"1. Cacheo de Consultas Frecuentes","text":"<pre><code>@GetMapping(\"/by-rating\")\n@Cacheable(\"products-by-rating\")\nList&lt;ProductView&gt; getProductsByRating() {\n    return repository.findAllOrderByRatingDesc();\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#2-proyecciones-para-apis-publicas","title":"2. Proyecciones para APIs P\u00fablicas","text":"<pre><code>// Solo devolver campos necesarios\npublic interface ProductSummary {\n    String getName();\n    BigDecimal getPrice();\n    Double getAverageRating();\n}\n\n@Query(\"SELECT p.name as name, p.price as price, p.averageRating as averageRating FROM ProductView p\")\nList&lt;ProductSummary&gt; findProductSummaries();\n</code></pre>"},{"location":"spring_modulith_part_2/#3-paginacion-para-listas-grandes","title":"3. Paginaci\u00f3n para Listas Grandes","text":"<pre><code>@GetMapping\nPagedResult&lt;ProductView&gt; getAllProducts(Pageable pageable) {\n    var page = repository.findAll(pageable);\n    return PagedResult.of(page.getContent(), page.getNumber(), \n                         page.getSize(), page.getTotalElements());\n}\n</code></pre>"},{"location":"spring_modulith_part_2/#que-hemos-logrado-en-la-parte-2","title":"\u00bfQu\u00e9 Hemos Logrado en la Parte 2?","text":"<p>\u2705 Implementaci\u00f3n completa de CQRS con separaci\u00f3n clara de comandos y queries \u2705 Comunicaci\u00f3n as\u00edncrona entre m\u00f3dulos v\u00eda eventos \u2705 Modelos optimizados para escritura y lectura \u2705 Testing independiente de m\u00f3dulos con TestContainers \u2705 APIs REST funcionales para ambos lados \u2705 Manejo de eventos con retry autom\u00e1tico</p>"},{"location":"spring_modulith_part_2/#preparandose-para-la-parte-3","title":"Prepar\u00e1ndose para la Parte 3","text":"<p>En la Parte 3 completaremos el workshop con:</p> <ul> <li>Monitoreo y observabilidad del sistema</li> <li>Performance tuning y optimizaciones avanzadas</li> <li>Deployment con Docker y Docker Compose</li> <li>Migraci\u00f3n gradual a microservicios cuando sea necesario</li> <li>Best practices para producci\u00f3n</li> </ul> <p>Tu implementaci\u00f3n CQRS est\u00e1 funcionando correctamente. \u00a1Listo para la parte final!</p>"},{"location":"spring_modulith_part_3/","title":"Gu\u00eda CQRS Spring Modulith - Parte 3: Observabilidad y Deployment","text":""},{"location":"spring_modulith_part_3/#continuando-desde-la-parte-2","title":"Continuando desde la Parte 2","text":"<p>En la Parte 2 implementamos completamente el patr\u00f3n CQRS con Spring Modulith. Ahora vamos a agregar observabilidad, automatizaci\u00f3n y deployment para tener un sistema completo listo para producci\u00f3n.</p>"},{"location":"spring_modulith_part_3/#tabla-de-contenidos-parte-3","title":"Tabla de Contenidos - Parte 3","text":"<ol> <li>Observabilidad con Zipkin</li> <li>Automatizaci\u00f3n con Taskfile</li> <li>Eventos Externos con Kafka</li> <li>Testing de Integraci\u00f3n Avanzado</li> <li>Deployment con Docker</li> <li>Demo Final</li> <li>Conclusi\u00f3n del Workshop</li> </ol>"},{"location":"spring_modulith_part_3/#observabilidad-con-zipkin","title":"Observabilidad con Zipkin","text":""},{"location":"spring_modulith_part_3/#que-es-observabilidad","title":"\u00bfQu\u00e9 es Observabilidad?","text":"<p>Definici\u00f3n simple: La capacidad de entender qu\u00e9 est\u00e1 pasando dentro de tu aplicaci\u00f3n mientras funciona.</p> <p>Analog\u00eda: Es como tener \"rayos X\" de tu aplicaci\u00f3n para ver c\u00f3mo fluyen las peticiones y datos.</p>"},{"location":"spring_modulith_part_3/#por-que-necesitamos-observabilidad-en-modulos","title":"\u00bfPor qu\u00e9 Necesitamos Observabilidad en M\u00f3dulos?","text":"<p>Problema sin observabilidad: <pre><code>// Usuario reporta: \"Agregu\u00e9 un review pero no se actualiza el promedio\"\n// \u00bfD\u00f3nde est\u00e1 el problema?\n// - \u00bfSe guard\u00f3 el review?\n// - \u00bfSe public\u00f3 el evento?\n// - \u00bfSe proces\u00f3 el evento?\n// - \u00bfSe actualiz\u00f3 la vista?\n// NO LO SABEMOS\n</code></pre></p> <p>Con observabilidad: <pre><code>Traza completa:\n1. POST /products/123/reviews \u2192 200ms\n2. ProductCommandService.addReview \u2192 50ms\n3. ProductRepository.save \u2192 30ms\n4. EventPublisher.publishEvent \u2192 5ms\n5. ProductEventHandler.on \u2192 80ms \u2190 AQU\u00cd FALL\u00d3\n6. ProductViewRepository.save \u2192 NO EJECUTADO\n</code></pre></p>"},{"location":"spring_modulith_part_3/#que-es-zipkin","title":"\u00bfQu\u00e9 es Zipkin?","text":"<p>Definici\u00f3n: Zipkin es una herramienta que rastrea peticiones a trav\u00e9s de sistemas distribuidos.</p> <p>\u00bfPara qu\u00e9 sirve? - Ver el tiempo que toma cada operaci\u00f3n - Identificar cuellos de botella - Debuggear problemas de performance - Entender el flujo de datos entre m\u00f3dulos</p> <p>\u00bfPor qu\u00e9 Zipkin y no logs?</p> <p>Logs tradicionales: <pre><code>2024-01-15 10:30:01 INFO ProductService - Creating product\n2024-01-15 10:30:01 INFO EventPublisher - Publishing event\n2024-01-15 10:30:02 INFO ProductHandler - Processing event\n</code></pre> Problema: \u00bfQu\u00e9 evento pertenece a qu\u00e9 producto? \u00bfCu\u00e1nto tiempo tom\u00f3 en total?</p> <p>Zipkin (Distributed Tracing): <pre><code>Trace ID: abc123\n\u251c\u2500 Span 1: ProductService.createProduct [100ms]\n\u251c\u2500 Span 2: ProductRepository.save [30ms]\n\u2514\u2500 Span 3: ProductEventHandler.on [70ms]\n</code></pre> Ventaja: Ves el flujo completo con tiempos exactos y relaciones.</p>"},{"location":"spring_modulith_part_3/#como-funciona-la-trazabilidad","title":"\u00bfC\u00f3mo Funciona la Trazabilidad?","text":"<p>Conceptos clave:</p>"},{"location":"spring_modulith_part_3/#1-trace-traza","title":"1. Trace (Traza)","text":"<p>Definici\u00f3n: El viaje completo de una petici\u00f3n a trav\u00e9s de tu sistema.</p> <p>Ejemplo: \"Crear un producto con review\" <pre><code>Trace: \"POST /products + POST /reviews\"\n\u251c\u2500 Crear producto\n\u251c\u2500 Publicar evento ProductCreated  \n\u251c\u2500 Actualizar vista de producto\n\u251c\u2500 Agregar review\n\u251c\u2500 Publicar evento ProductReviewed\n\u2514\u2500 Actualizar estad\u00edsticas\n</code></pre></p>"},{"location":"spring_modulith_part_3/#2-span","title":"2. Span","text":"<p>Definici\u00f3n: Una operaci\u00f3n individual dentro de una traza.</p> <p>Ejemplo: \"Guardar en base de datos\" - Inicio: 10:30:01.100 - Fin: 10:30:01.130 - Duraci\u00f3n: 30ms - Operaci\u00f3n: ProductRepository.save</p>"},{"location":"spring_modulith_part_3/#3-trace-id-y-span-id","title":"3. Trace ID y Span ID","text":"<p>Definici\u00f3n: Identificadores \u00fanicos para correlacionar operaciones.</p> <p>Analog\u00eda: Como el n\u00famero de seguimiento de un paquete que te permite ver todos los pasos del env\u00edo.</p>"},{"location":"spring_modulith_part_3/#configuracion-de-trazabilidad","title":"Configuraci\u00f3n de Trazabilidad","text":""},{"location":"spring_modulith_part_3/#paso-1-agregar-dependencias-de-observabilidad","title":"Paso 1: Agregar Dependencias de Observabilidad","text":"<pre><code>&lt;!-- pom.xml - Agregar estas dependencias para observabilidad --&gt;\n&lt;dependencies&gt;\n    &lt;!-- Las dependencias existentes... --&gt;\n\n    &lt;!-- \n    \u00bfQu\u00e9 es? Puente entre Spring y Brave (biblioteca de tracing)\n    \u00bfPara qu\u00e9? Permite que Spring Boot genere autom\u00e1ticamente trazas\n    \u00bfSin esto? No habr\u00eda trazabilidad entre m\u00e9todos\n    --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n        &lt;artifactId&gt;micrometer-tracing-bridge-brave&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- \n    \u00bfQu\u00e9 es? Cliente que env\u00eda trazas a Zipkin\n    \u00bfPara qu\u00e9? Transporta las trazas desde tu app hasta Zipkin UI\n    \u00bfSin esto? Las trazas se quedan en memoria y no las ves\n    --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.zipkin.reporter2&lt;/groupId&gt;\n        &lt;artifactId&gt;zipkin-reporter-brave&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- \n    \u00bfQu\u00e9 es? Endpoints de monitoreo de Spring Boot\n    \u00bfPara qu\u00e9? Expone /actuator/health, /actuator/modulith, etc.\n    \u00bfSin esto? No puedes ver el estado de tu aplicaci\u00f3n externamente\n    --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"spring_modulith_part_3/#paso-2-configuracion-explicada","title":"Paso 2: Configuraci\u00f3n Explicada","text":"<pre><code># src/main/resources/application.yml - Agregar configuraci\u00f3n de observabilidad\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        # \u00bfQu\u00e9 hace? Expone endpoints \u00fatiles v\u00eda HTTP\n        # \u00bfPor qu\u00e9 estos? health=estado, modulith=informaci\u00f3n de m\u00f3dulos\n        include: health,info,metrics,modulith\n  endpoint:\n    health:\n      # \u00bfQu\u00e9 hace? Muestra detalles de salud (BD, Kafka, etc.)\n      # \u00bfPor qu\u00e9? Para debugging r\u00e1pido sin logs\n      show-details: always\n    modulith:\n      # \u00bfQu\u00e9 hace? Endpoint espec\u00edfico de Spring Modulith\n      # \u00bfPara qu\u00e9? Ver qu\u00e9 m\u00f3dulos tienes y sus dependencias\n      enabled: true\n\n  # Configuraci\u00f3n de trazas\n  tracing:\n    sampling:\n      # \u00bfQu\u00e9 es? Porcentaje de peticiones que se rastrean\n      # \u00bfPor qu\u00e9 1.0? En desarrollo queremos ver todo\n      # \u00bfEn producci\u00f3n? 0.1 (10%) para no saturar\n      probability: 1.0\n  zipkin:\n    tracing:\n      # \u00bfQu\u00e9 hace? URL donde Zipkin recibe las trazas\n      # \u00bfPor qu\u00e9 esta URL? Es el endpoint est\u00e1ndar de Zipkin\n      endpoint: http://localhost:9411/api/v2/spans\n\n# Logging para ver IDs de traza en consola\nlogging:\n  pattern:\n    # \u00bfQu\u00e9 hace? Agrega traceId y spanId a cada log\n    # \u00bfPara qu\u00e9? Correlacionar logs con trazas en Zipkin\n    level: \"%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]\"\n</code></pre>"},{"location":"spring_modulith_part_3/#que-informacion-nos-da-el-endpoint-de-modulos","title":"\u00bfQu\u00e9 Informaci\u00f3n Nos Da el Endpoint de M\u00f3dulos?","text":"<pre><code># Ver informaci\u00f3n de m\u00f3dulos\ncurl http://localhost:8080/actuator/modulith\n</code></pre> <p>Respuesta explicada: <pre><code>{\n  \"modules\": [\n    {\n      \"name\": \"products\",                    // Nombre del m\u00f3dulo\n      \"basePackage\": \"com.example.store.products\",  // Paquete ra\u00edz\n      \"dependencies\": [\"common\"],            // De qu\u00e9 m\u00f3dulos depende\n      \"exposedTypes\": [                      // APIs p\u00fablicas\n        \"ProductService\", \n        \"Product\"\n      ]\n    }\n  ],\n  \"violations\": []                           // Reglas arquitect\u00f3nicas violadas\n}\n</code></pre></p> <p>\u00bfPara qu\u00e9 sirve esto? - Documentaci\u00f3n autom\u00e1tica: Siempre actualizada - Debugging de dependencias: Ver qui\u00e9n depende de qui\u00e9n - Validaci\u00f3n de arquitectura: Detectar violaciones - Onboarding de nuevos desarrolladores: Entender la estructura</p>"},{"location":"spring_modulith_part_3/#automatizacion-con-taskfile","title":"Automatizaci\u00f3n con Taskfile","text":""},{"location":"spring_modulith_part_3/#que-es-taskfile","title":"\u00bfQu\u00e9 es Taskfile?","text":"<p>Definici\u00f3n: Taskfile es una herramienta de automatizaci\u00f3n que usa YAML en lugar de Makefiles o scripts bash.</p> <p>Analog\u00eda: Es como tener un \"control remoto\" para tu proyecto donde cada bot\u00f3n ejecuta una secuencia de comandos.</p>"},{"location":"spring_modulith_part_3/#por-que-taskfile-en-lugar-de-scripts-bash","title":"\u00bfPor Qu\u00e9 Taskfile en Lugar de Scripts Bash?","text":""},{"location":"spring_modulith_part_3/#problemas-con-scripts-bash","title":"Problemas con Scripts Bash","text":"<p>1. Multiplataforma: <pre><code># archivo.sh - Solo funciona en Linux/Mac\n#!/bin/bash\n./mvnw clean test\n\n# archivo.bat - Solo funciona en Windows  \n@echo off\nmvnw.cmd clean test\n</code></pre></p> <p>2. Dependencias manuales: <pre><code># build.sh\n./test.sh          # \u00bfQu\u00e9 pasa si test.sh falla?\n./compile.sh       # \u00bfSe ejecuta igual?\n./package.sh       # \u00bfEn qu\u00e9 orden van?\n</code></pre></p> <p>3. Manejo de errores complejo: <pre><code># Complejo de leer y mantener\nset -e\nif ! ./mvnw test; then\n    echo \"Tests failed\"\n    exit 1\nfi\nif ! docker build .; then\n    echo \"Build failed\"  \n    exit 1\nfi\n</code></pre></p>"},{"location":"spring_modulith_part_3/#ventajas-de-taskfile","title":"Ventajas de Taskfile","text":"<p>1. Multiplataforma autom\u00e1tico: <pre><code># Funciona igual en Windows, Linux, Mac\nvars:\n  MVNW: '{{if eq .GOOS \"windows\"}}mvnw.cmd{{else}}./mvnw{{end}}'\n</code></pre></p> <p>2. Dependencias declarativas: <pre><code>build:\n  deps: [test]        # Ejecuta 'test' antes de 'build'\n  cmds:\n    - \"{{.MVNW}} package\"\n</code></pre></p> <p>3. Sintaxis clara: <pre><code># F\u00e1cil de leer y entender\ntest:\n  desc: \"Ejecuta todos los tests\"\n  cmds:\n    - \"{{.MVNW}} clean verify\"\n</code></pre></p>"},{"location":"spring_modulith_part_3/#implementacion-del-taskfile","title":"Implementaci\u00f3n del Taskfile","text":"<p>Crea <code>Taskfile.yml</code> en la ra\u00edz del proyecto:</p> <pre><code># Taskfile.yml\nversion: '3'\n\n# Variables globales - Reutilizables en todo el archivo\nvars:\n  GOOS: \"{{default OS .GOOS}}\"                    # Sistema operativo\n  MVNW: '{{if eq .GOOS \"windows\"}}mvnw.cmd{{else}}./mvnw{{end}}'  # Maven wrapper correcto\n  DC_DIR: \"deployment\"                            # Directorio de Docker Compose\n  APP_NAME: \"store-cqrs\"                         # Nombre de la aplicaci\u00f3n\n\ntasks:\n\n  # =====================================\n  # TAREAS DE DESARROLLO\n  # =====================================\n\n  default:\n    # \u00bfQu\u00e9 hace? Se ejecuta cuando solo escribes 'task'\n    # \u00bfPor qu\u00e9? Acci\u00f3n m\u00e1s com\u00fan = ejecutar tests\n    desc: \"Ejecuta tests y verifica m\u00f3dulos\"\n    cmds:\n      - task: test\n\n  format:\n    # \u00bfQu\u00e9 hace? Formatea el c\u00f3digo con Spotless\n    # \u00bfPor qu\u00e9? Mantiene estilo consistente sin discusiones\n    desc: \"Formatea el c\u00f3digo\"\n    cmds:\n      - \"{{.MVNW}} spotless:apply\"\n\n  test:\n    # \u00bfQu\u00e9 hace? Ejecuta todos los tests\n    # \u00bfPor qu\u00e9 deps? Siempre formatea antes de testear\n    desc: \"Ejecuta todos los tests\"\n    deps: [format]\n    cmds:\n      - \"{{.MVNW}} clean verify\"\n\n  test:modulith:\n    # \u00bfQu\u00e9 hace? Solo verifica que la estructura modular sea correcta\n    # \u00bfCu\u00e1ndo usar? Para debugging r\u00e1pido de arquitectura\n    desc: \"Verifica estructura modular\"\n    cmds:\n      - \"{{.MVNW}} test -Dtest=ModularityTest\"\n      - echo \"\u2705 Estructura modular verificada\"\n\n  # =====================================\n  # DOCUMENTACI\u00d3N\n  # =====================================\n\n  docs:\n    # \u00bfQu\u00e9 hace? Genera diagramas de la estructura modular\n    # \u00bfPor qu\u00e9? Documentaci\u00f3n siempre actualizada autom\u00e1ticamente\n    desc: \"Genera documentaci\u00f3n de m\u00f3dulos\"\n    cmds:\n      - \"{{.MVNW}} test -Dtest=ModularityTest\"\n      - echo \"\ud83d\udcda Documentaci\u00f3n generada en target/spring-modulith-docs/\"\n\n  # =====================================\n  # CONSTRUCCI\u00d3N\n  # =====================================\n\n  build:\n    # \u00bfQu\u00e9 hace? Compila y empaqueta la aplicaci\u00f3n\n    # \u00bfPor qu\u00e9 deps? Asegura que tests pasan antes de compilar\n    desc: \"Construye la aplicaci\u00f3n\"\n    deps: [test]\n    cmds:\n      - \"{{.MVNW}} clean package -DskipTests\"\n\n  build:image:\n    # \u00bfQu\u00e9 hace? Crea imagen Docker de la aplicaci\u00f3n\n    # \u00bfPor qu\u00e9? Para despliegue containerizado\n    desc: \"Construye imagen Docker\"\n    deps: [build]\n    cmds:\n      - \"{{.MVNW}} spring-boot:build-image -DskipTests\"\n      - echo \"\ud83d\udc33 Imagen construida: {{.APP_NAME}}:latest\"\n\n  # =====================================\n  # INFRAESTRUCTURA\n  # =====================================\n\n  infra:start:\n    # \u00bfQu\u00e9 hace? Inicia solo los servicios base (BD, Zipkin, Kafka)\n    # \u00bfPor qu\u00e9 separado? Para desarrollo local sin la app\n    desc: \"Inicia servicios base (PostgreSQL, Zipkin, Kafka)\"\n    cmds:\n      - docker compose -f \"{{.DC_DIR}}/docker-compose.yml\" up -d postgres zipkin kafka\n      - echo \"\ud83d\ude80 Esperando servicios...\"\n      - task: infra:wait\n      - echo \"\u2705 Infraestructura lista\"\n\n  infra:wait:\n    # \u00bfQu\u00e9 hace? Espera a que todos los servicios est\u00e9n listos\n    # \u00bfPor qu\u00e9? Evita errores de \"connection refused\"\n    desc: \"Espera a que los servicios est\u00e9n listos\"\n    cmds:\n      - |\n        echo \"\u23f3 Esperando PostgreSQL...\"\n        timeout 60 sh -c 'until docker compose -f {{.DC_DIR}}/docker-compose.yml exec -T postgres pg_isready -U store_user; do sleep 1; done'\n        echo \"\u23f3 Esperando Zipkin...\"\n        timeout 30 sh -c 'until curl -f http://localhost:9411/health; do sleep 1; done'\n        echo \"\u23f3 Esperando Kafka...\"\n        timeout 30 sh -c 'until docker compose -f {{.DC_DIR}}/docker-compose.yml exec -T kafka kafka-topics.sh --bootstrap-server localhost:9092 --list; do sleep 1; done'\n    silent: true\n\n  infra:stop:\n    desc: \"Detiene todos los servicios\"\n    cmds:\n      - docker compose -f \"{{.DC_DIR}}/docker-compose.yml\" down\n\n  infra:clean:\n    desc: \"Detiene servicios y limpia vol\u00famenes\"\n    cmds:\n      - docker compose -f \"{{.DC_DIR}}/docker-compose.yml\" down -v\n      - docker system prune -f\n\n  # =====================================\n  # DESARROLLO LOCAL\n  # =====================================\n\n  dev:\n    # \u00bfQu\u00e9 hace? Prepara todo para desarrollo local\n    # \u00bfQu\u00e9 incluye? Solo infraestructura, la app se ejecuta con IDE\n    desc: \"Inicia entorno de desarrollo\"\n    cmds:\n      - task: infra:start\n      - echo \"\ud83d\udd27 Entorno listo. Ejecuta: {{.MVNW}} spring-boot:run\"\n      - echo \"\ud83d\udcca Zipkin: http://localhost:9411\"\n      - echo \"\ud83d\udc18 PostgreSQL: localhost:5432\"\n      - echo \"\ud83d\udce1 Kafka: localhost:9092\"\n\n  # =====================================\n  # DEMO COMPLETO\n  # =====================================\n\n  demo:\n    desc: \"Demo completo con todos los servicios\"\n    cmds:\n      - task: build:image\n      - docker compose -f \"{{.DC_DIR}}/docker-compose.yml\" up -d\n      - task: infra:wait\n      - echo \"\ud83c\udf89 Demo listo!\"\n      - echo \"\ud83c\udf10 Aplicaci\u00f3n: http://localhost:8080\"\n      - echo \"\u2764\ufe0f Health Check: http://localhost:8080/actuator/health\"\n      - echo \"\ud83d\uddc2\ufe0f M\u00f3dulos: http://localhost:8080/actuator/modulith\"\n      - echo \"\ud83d\udcca Zipkin: http://localhost:9411\"\n\n  demo:stop:\n    desc: \"Detiene el demo\"\n    cmds:\n      - docker compose -f \"{{.DC_DIR}}/docker-compose.yml\" down\n\n  demo:clean:\n    desc: \"Limpia completamente el demo\"\n    cmds:\n      - docker compose -f \"{{.DC_DIR}}/docker-compose.yml\" down -v\n      - docker image rm {{.APP_NAME}}:latest || true\n</code></pre>"},{"location":"spring_modulith_part_3/#como-se-usa-en-la-practica","title":"\u00bfC\u00f3mo se Usa en la Pr\u00e1ctica?","text":"<pre><code># Comandos m\u00e1s comunes en desarrollo\ntask                    # = task default = tests\ntask dev               # Prepara entorno, luego usar IDE\ntask test:modulith     # Solo verificar arquitectura\ntask docs              # Generar documentaci\u00f3n\ntask build             # Compilar aplicaci\u00f3n\ntask infra:start       # Solo servicios base\ntask demo              # Demo completo\n</code></pre>"},{"location":"spring_modulith_part_3/#eventos-externos-con-kafka","title":"Eventos Externos con Kafka","text":""},{"location":"spring_modulith_part_3/#que-es-kafka","title":"\u00bfQu\u00e9 es Kafka?","text":"<p>Definici\u00f3n: Apache Kafka es una plataforma de streaming de eventos distribuida.</p> <p>Analog\u00eda: Es como un \"buz\u00f3n de correo masivo\" donde: - Los productores env\u00edan mensajes (eventos) - Los t\u00f3picos organizan los mensajes por tema - Los consumidores leen mensajes que les interesan</p>"},{"location":"spring_modulith_part_3/#por-que-necesitamos-eventos-externos","title":"\u00bfPor Qu\u00e9 Necesitamos Eventos Externos?","text":""},{"location":"spring_modulith_part_3/#problema-comunicacion-con-sistemas-externos","title":"Problema: Comunicaci\u00f3n con Sistemas Externos","text":"<p>Escenario: Tu aplicaci\u00f3n de productos debe notificar a otros sistemas cuando algo importante pasa.</p> <p>Sistemas que pueden interesarse: - Sistema de inventario: Actualizar stock cuando se vende - Sistema de recomendaciones: Ajustar algoritmos con nuevos reviews - Sistema de analytics: Registrar m\u00e9tricas de productos - Sistema de notificaciones: Enviar emails de nuevos productos</p>"},{"location":"spring_modulith_part_3/#opciones-de-comunicacion","title":"Opciones de Comunicaci\u00f3n","text":"<p>\u274c Opci\u00f3n 1: Llamadas HTTP Directas <pre><code>// Problema: Alto acoplamiento\nproductService.createProduct(...);\nhttpClient.post(\"http://inventory-service/update\");      // \u00bfY si est\u00e1 ca\u00eddo?\nhttpClient.post(\"http://analytics-service/track\");       // \u00bfY si es lento?\nhttpClient.post(\"http://recommendations-service/sync\");  // \u00bfY si cambia la URL?\n</code></pre></p> <p>\u274c Opci\u00f3n 2: Base de Datos Compartida <pre><code>// Problema: Acoplamiento de datos\nproductRepository.save(product);\nsharedDatabase.insert(\"inventory_updates\", ...);  // Todos acceden a la misma BD\nsharedDatabase.insert(\"analytics_events\", ...);   // Violates microservices principles\n</code></pre></p> <p>\u2705 Opci\u00f3n 3: Eventos con Kafka <pre><code>// Soluci\u00f3n: Bajo acoplamiento\nproductService.createProduct(...);\neventPublisher.publishEvent(new ProductCreated(...));  // Solo publicar\n// Otros sistemas se suscriben si les interesa\n// No conoces qui\u00e9n consume, no es tu problema\n</code></pre></p>"},{"location":"spring_modulith_part_3/#como-funciona-kafka","title":"\u00bfC\u00f3mo Funciona Kafka?","text":""},{"location":"spring_modulith_part_3/#conceptos-fundamentales","title":"Conceptos Fundamentales","text":"<p>1. T\u00f3pico (Topic) Definici\u00f3n: Un canal de comunicaci\u00f3n para un tipo espec\u00edfico de evento.</p> <p>Ejemplo: <pre><code>T\u00f3pico: \"products.created\"\n\u251c\u2500 Evento 1: {id: \"123\", name: \"iPhone\", price: 999}\n\u251c\u2500 Evento 2: {id: \"124\", name: \"MacBook\", price: 1999}\n\u2514\u2500 Evento 3: {id: \"125\", name: \"iPad\", price: 599}\n</code></pre></p> <p>2. Productor (Producer) Definici\u00f3n: Aplicaci\u00f3n que env\u00eda eventos a un t\u00f3pico.</p> <p>En nuestro caso: La aplicaci\u00f3n Spring Modulith</p> <p>3. Consumidor (Consumer) Definici\u00f3n: Aplicaci\u00f3n que lee eventos de un t\u00f3pico.</p> <p>Ejemplos: - Servicio de inventario lee \"products.created\" - Servicio de analytics lee \"products.reviewed\" - Servicio de notificaciones lee ambos</p>"},{"location":"spring_modulith_part_3/#ventajas-de-kafka-vs-otras-opciones","title":"Ventajas de Kafka vs Otras Opciones","text":"Aspecto HTTP Directo Base de Datos Kafka Acoplamiento Alto Alto Bajo Disponibilidad Si un servicio cae, todo falla BD puede saturarse Resiliente Escalabilidad Limitada Limitada Muy alta Auditor\u00eda Dif\u00edcil Manual Autom\u00e1tica Reprocessing No Dif\u00edcil F\u00e1cil"},{"location":"spring_modulith_part_3/#configuracion-de-kafka","title":"Configuraci\u00f3n de Kafka","text":""},{"location":"spring_modulith_part_3/#paso-1-agregar-dependencias-de-kafka","title":"Paso 1: Agregar Dependencias de Kafka","text":"<pre><code>&lt;!-- pom.xml - Agregar dependencias de Kafka --&gt;\n&lt;dependency&gt;\n    &lt;!-- \u00bfQu\u00e9 es? Cliente oficial de Kafka para Spring --&gt;\n    &lt;!-- \u00bfPara qu\u00e9? Enviar y recibir mensajes de Kafka --&gt;\n    &lt;!-- \u00bfSin esto? No hay comunicaci\u00f3n con Kafka --&gt;\n    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;!-- \u00bfQu\u00e9 es? Integraci\u00f3n entre Spring Modulith y Kafka --&gt;\n    &lt;!-- \u00bfPara qu\u00e9? Publicar eventos internos autom\u00e1ticamente a Kafka --&gt;\n    &lt;!-- \u00bfSin esto? Tendr\u00edas que publicar manualmente a Kafka --&gt;\n    &lt;groupId&gt;org.springframework.modulith&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-modulith-events-kafka&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"spring_modulith_part_3/#paso-2-configuracion-explicada_1","title":"Paso 2: Configuraci\u00f3n Explicada","text":"<pre><code># application.yml - Agregar configuraci\u00f3n de Kafka\nspring:\n  kafka:\n    # \u00bfQu\u00e9 es? Direcci\u00f3n del cluster de Kafka\n    # \u00bfPor qu\u00e9 localhost:9092? Puerto est\u00e1ndar de Kafka\n    bootstrap-servers: localhost:9092\n\n    producer:\n      # \u00bfQu\u00e9 hace? Serializa la clave del mensaje\n      # \u00bfPor qu\u00e9 String? Claves simples como \"product-123\"\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\n\n      # \u00bfQu\u00e9 hace? Convierte objetos Java a JSON\n      # \u00bfPor qu\u00e9 JSON? Formato est\u00e1ndar, legible, interoperable\n      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer\n\n    consumer:\n      # \u00bfQu\u00e9 es? Identificador del grupo de consumidores\n      # \u00bfPara qu\u00e9? Kafka garantiza que solo uno del grupo procese cada mensaje\n      group-id: store-cqrs\n\n      # \u00bfQu\u00e9 hace? Lee claves como String\n      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer\n\n      # \u00bfQu\u00e9 hace? Convierte JSON de vuelta a objetos Java\n      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer\n\n      properties:\n        # \u00bfQu\u00e9 es? Paquetes Java confiables para deserializaci\u00f3n\n        # \u00bfPor qu\u00e9? Seguridad: evita crear objetos de paquetes maliciosos\n        spring.json.trusted.packages: \"com.example.store\"\n\n  modulith:\n    events:\n      externalization:\n        # \u00bfQu\u00e9 hace? Habilita publicaci\u00f3n autom\u00e1tica a sistemas externos\n        # \u00bfC\u00f3mo? Eventos marcados con @Externalized van a Kafka\n        enabled: true\n</code></pre>"},{"location":"spring_modulith_part_3/#paso-3-configurar-que-eventos-van-a-kafka","title":"Paso 3: Configurar Qu\u00e9 Eventos Van a Kafka","text":"<pre><code>// src/main/java/com/example/store/config/EventsConfig.java\npackage com.example.store.config;\n\nimport com.example.store.products.command.ProductEvents.ProductCreated;\nimport com.example.store.products.command.ProductEvents.ProductReviewed;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.modulith.events.config.EventExternalizationConfiguration;\n\n/**\n * Configuraci\u00f3n para decidir qu\u00e9 eventos se publican externamente.\n */\n@Configuration\npublic class EventsConfig {\n\n    @Bean\n    EventExternalizationConfiguration eventExternalizationConfiguration() {\n        return EventExternalizationConfiguration.externalizing()\n            // ProductCreated va al t\u00f3pico \"products.created\"\n            .route(ProductCreated.class).to(\"products.created\")\n\n            // ProductReviewed va al t\u00f3pico \"products.reviewed\"  \n            .route(ProductReviewed.class).to(\"products.reviewed\")\n\n            // ProductUpdated NO se incluye = solo interno\n            .build();\n    }\n}\n</code></pre> <p>\u00bfPor qu\u00e9 algunos eventos van a Kafka y otros no?</p> <p>A Kafka (eventos que interesan a otros sistemas): - <code>ProductCreated</code>: Inventario necesita saber para crear stock - <code>ProductReviewed</code>: Analytics necesita para m\u00e9tricas</p> <p>Solo internos (eventos de implementaci\u00f3n): - <code>ProductUpdated</code>: Solo le importa a nuestra aplicaci\u00f3n</p>"},{"location":"spring_modulith_part_3/#que-pasa-cuando-publicas-un-evento","title":"\u00bfQu\u00e9 Pasa Cuando Publicas un Evento?","text":"<p>Flujo completo:</p> <ol> <li> <p>Comando ejecutado:    <pre><code>productService.createProduct(\"iPhone\", ...);\n</code></pre></p> </li> <li> <p>Evento publicado internamente:    <pre><code>eventPublisher.publishEvent(new ProductCreated(...));\n</code></pre></p> </li> <li> <p>Spring Modulith act\u00faa:</p> </li> <li>Busca listeners internos \u2192 Ejecuta <code>ProductEventHandler.on()</code></li> <li> <p>Ve configuraci\u00f3n \u2192 Env\u00eda tambi\u00e9n a Kafka</p> </li> <li> <p>En Kafka:    <pre><code>T\u00f3pico: \"products.created\"\nMensaje: {\n  \"id\": \"123\",\n  \"name\": \"iPhone 15\",\n  \"price\": 999.99,\n  \"category\": \"Electronics\"\n}\n</code></pre></p> </li> <li> <p>Sistemas externos:</p> </li> <li>Servicio de inventario consume y crea stock inicial</li> <li>Servicio de analytics registra nueva categoria</li> <li>Servicio de recomendaciones actualiza algoritmos</li> </ol>"},{"location":"spring_modulith_part_3/#testing-de-integracion-avanzado","title":"Testing de Integraci\u00f3n Avanzado","text":""},{"location":"spring_modulith_part_3/#testing-con-kafka","title":"Testing con Kafka","text":"<p>Para testear la integraci\u00f3n con Kafka, necesitamos tests que verifiquen que los eventos se publican correctamente.</p> <pre><code>// src/test/java/com/example/store/events/KafkaIntegrationTest.java\npackage com.example.store.events;\n\nimport com.example.store.products.command.Product.ProductIdentifier;\nimport com.example.store.products.command.ProductCommandService;\nimport com.example.store.products.command.ProductEvents.ProductCreated;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.listener.ContainerProperties;\nimport org.springframework.kafka.listener.KafkaMessageListenerContainer;\nimport org.springframework.kafka.listener.MessageListener;\nimport org.springframework.kafka.support.serializer.JsonDeserializer;\nimport org.springframework.kafka.test.EmbeddedKafkaBroker;\nimport org.springframework.kafka.test.context.EmbeddedKafka;\nimport org.springframework.kafka.test.utils.KafkaTestUtils;\nimport org.springframework.test.annotation.DirtiesContext;\n\nimport java.math.BigDecimal;\nimport java.time.Duration;\nimport java.util.Map;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Test de integraci\u00f3n para verificar que eventos se publican a Kafka.\n * \n * \u00bfQu\u00e9 hace @EmbeddedKafka?\n * - Levanta un broker de Kafka real para testing\n * - No necesita Docker durante tests\n * - Aislado por test\n */\n@SpringBootTest\n@EmbeddedKafka(topics = {\"products.created\", \"products.reviewed\"})\n@DirtiesContext  // Limpia contexto despu\u00e9s de cada test\n@RequiredArgsConstructor\nclass KafkaIntegrationTest {\n\n    private final ProductCommandService productCommandService;\n    private final EmbeddedKafkaBroker embeddedKafka;\n\n    @Test\n    void shouldPublishProductCreatedEventToKafka() throws InterruptedException {\n        // Arrange: Configurar consumidor de Kafka para test\n        Map&lt;String, Object&gt; consumerProps = KafkaTestUtils.consumerProps(\"test-group\", \"true\", embeddedKafka);\n        consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);\n        consumerProps.put(JsonDeserializer.TRUSTED_PACKAGES, \"com.example.store\");\n\n        var consumerFactory = new DefaultKafkaConsumerFactory&lt;String, ProductCreated&gt;(consumerProps);\n        var container = new KafkaMessageListenerContainer&lt;&gt;(consumerFactory, \n            new ContainerProperties(\"products.created\"));\n\n        BlockingQueue&lt;ConsumerRecord&lt;String, ProductCreated&gt;&gt; records = new LinkedBlockingQueue&lt;&gt;();\n        container.setupMessageListener((MessageListener&lt;String, ProductCreated&gt;) records::add);\n        container.start();\n\n        // Act: Crear producto\n        ProductIdentifier productId = productCommandService.createProduct(\n            \"Test Product\", \"Description\", new BigDecimal(\"99.99\"), 10, \"Electronics\"\n        );\n\n        // Assert: Verificar que evento lleg\u00f3 a Kafka\n        ConsumerRecord&lt;String, ProductCreated&gt; record = records.poll(10, TimeUnit.SECONDS);\n        assertThat(record).isNotNull();\n        assertThat(record.value().id()).isEqualTo(productId);\n        assertThat(record.value().name()).isEqualTo(\"Test Product\");\n\n        // Cleanup\n        container.stop();\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_3/#testing-de-observabilidad","title":"Testing de Observabilidad","text":"<pre><code>// src/test/java/com/example/store/observability/TracingTest.java\npackage com.example.store.observability;\n\nimport com.example.store.products.command.ProductCommandService;\nimport io.micrometer.tracing.TraceContext;\nimport io.micrometer.tracing.Tracer;\nimport lombok.RequiredArgsConstructor;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.modulith.test.ApplicationModuleTest;\n\nimport java.math.BigDecimal;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Test para verificar que la trazabilidad funciona correctamente.\n */\n@ApplicationModuleTest\n@RequiredArgsConstructor\nclass TracingTest {\n\n    private final ProductCommandService productCommandService;\n    private final Tracer tracer;\n\n    @Test\n    void shouldCreateTraceWhenCreatingProduct() {\n        // Arrange: Verificar que no hay traza activa\n        assertThat(tracer.currentTraceContext().context()).isNull();\n\n        // Act: Crear producto dentro de una traza\n        var span = tracer.nextSpan().name(\"test-create-product\").start();\n        try (Tracer.SpanInScope ws = tracer.withSpanInScope(span)) {\n            TraceContext context = tracer.currentTraceContext().context();\n            assertThat(context).isNotNull();\n\n            productCommandService.createProduct(\n                \"Traced Product\", \"Description\", new BigDecimal(\"49.99\"), 5, \"Test\"\n            );\n\n            // Assert: Verificar que la traza sigue activa\n            assertThat(tracer.currentTraceContext().context()).isEqualTo(context);\n\n        } finally {\n            span.end();\n        }\n    }\n}\n</code></pre>"},{"location":"spring_modulith_part_3/#deployment-con-docker","title":"Deployment con Docker","text":""},{"location":"spring_modulith_part_3/#que-es-docker","title":"\u00bfQu\u00e9 es Docker?","text":"<p>Definici\u00f3n: Docker es una plataforma que permite empaquetar aplicaciones y sus dependencias en contenedores.</p> <p>Analog\u00eda: Es como un \"contenedor de env\u00edo\" que garantiza que tu aplicaci\u00f3n funcione igual en cualquier lugar.</p>"},{"location":"spring_modulith_part_3/#por-que-docker-para-desarrollo","title":"\u00bfPor qu\u00e9 Docker para Desarrollo?","text":""},{"location":"spring_modulith_part_3/#problemas-sin-docker","title":"Problemas Sin Docker","text":"<p>\"Funciona en Mi M\u00e1quina\": <pre><code>Desarrollador A: Java 17, PostgreSQL 14, Ubuntu\nDesarrollador B: Java 11, PostgreSQL 13, Windows  \nServidor QA: Java 18, PostgreSQL 15, CentOS\nProducci\u00f3n: Java 17, PostgreSQL 16, AWS Linux\n\n\u00bfResultado? Comportamientos diferentes en cada ambiente\n</code></pre></p> <p>Instalaci\u00f3n Manual: <pre><code># Cada desarrollador debe instalar:\n- PostgreSQL (\u00bfqu\u00e9 versi\u00f3n?)\n- Kafka (\u00bfc\u00f3mo configurarlo?)  \n- Zipkin (\u00bfd\u00f3nde descargarlo?)\n- Java (\u00bfOpenJDK vs Oracle?)\n</code></pre></p>"},{"location":"spring_modulith_part_3/#ventajas-con-docker","title":"Ventajas con Docker","text":"<p>Ambiente Consistente: <pre><code># Todos usan exactamente:\npostgres:15-alpine    # Misma versi\u00f3n de PostgreSQL\nconfluentinc/cp-kafka # Misma distribuci\u00f3n de Kafka  \nopenzipkin/zipkin     # Misma versi\u00f3n de Zipkin\n</code></pre></p> <p>Instalaci\u00f3n Simple: <pre><code># Solo necesitas:\ntask dev              # Todo se instala autom\u00e1ticamente\n</code></pre></p>"},{"location":"spring_modulith_part_3/#docker-compose-explicado","title":"Docker Compose Explicado","text":"<p>Crea <code>deployment/docker-compose.yml</code>:</p> <pre><code># deployment/docker-compose.yml\nversion: '3.8'\n\nservices:\n  # =====================================\n  # BASE DE DATOS\n  # =====================================\n  postgres:\n    # \u00bfQu\u00e9 es? Imagen oficial de PostgreSQL optimizada (Alpine = peque\u00f1a)\n    image: postgres:15-alpine\n\n    # \u00bfQu\u00e9 es? Nombre del contenedor (para referenciarlo f\u00e1cilmente)\n    container_name: store-postgres\n\n    # \u00bfQu\u00e9 son? Variables que PostgreSQL lee al iniciar\n    environment:\n      POSTGRES_DB: store_db          # Nombre de la base de datos\n      POSTGRES_USER: store_user      # Usuario que crear\u00e1\n      POSTGRES_PASSWORD: store_password  # Contrase\u00f1a del usuario\n\n    # \u00bfQu\u00e9 hace? Mapea puerto del contenedor al host\n    # host:contenedor -&gt; localhost:5432 apunta al puerto 5432 del contenedor\n    ports:\n      - \"5432:5432\"\n\n    # \u00bfQu\u00e9 es? Almacenamiento persistente\n    # Sin esto: Datos se pierden al borrar el contenedor\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n    # \u00bfQu\u00e9 hace? Verifica si el servicio est\u00e1 listo\n    # \u00bfPor qu\u00e9? Otros servicios esperan hasta que PostgreSQL responda\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U store_user -d store_db\"]\n      interval: 10s      # Cada 10 segundos\n      timeout: 5s        # M\u00e1ximo 5 segundos de espera\n      retries: 5         # M\u00e1ximo 5 intentos\n\n    # \u00bfQu\u00e9 es? Red virtual para que contenedores se comuniquen\n    networks:\n      - store-network\n\n  # =====================================\n  # TRAZABILIDAD\n  # =====================================\n  zipkin:\n    # \u00bfQu\u00e9 es? Imagen oficial de Zipkin para trazabilidad\n    image: openzipkin/zipkin:latest\n    container_name: store-zipkin\n\n    ports:\n      # Puerto est\u00e1ndar de Zipkin\n      - \"9411:9411\"\n\n    environment:\n      # \u00bfQu\u00e9 hace? Usa memoria en lugar de base de datos\n      # \u00bfPor qu\u00e9? M\u00e1s simple para desarrollo (datos no persisten)\n      - STORAGE_TYPE=mem\n\n    healthcheck:\n      # \u00bfC\u00f3mo verifica? Hace petici\u00f3n HTTP al endpoint de salud\n      test: [\"CMD\", \"wget\", \"--quiet\", \"--tries=1\", \"--spider\", \"http://localhost:9411/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    networks:\n      - store-network\n\n  # =====================================\n  # KAFKA\n  # =====================================\n  zookeeper:\n    # \u00bfQu\u00e9 es Zookeeper? Servicio que Kafka necesita para coordinaci\u00f3n\n    # \u00bfPor qu\u00e9 lo necesitamos? Kafka depende de \u00e9l (por ahora)\n    image: confluentinc/cp-zookeeper:latest\n    container_name: store-zookeeper\n    environment:\n      # Puerto est\u00e1ndar donde Kafka se conecta a Zookeeper\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n    ports:\n      - \"2181:2181\"\n    networks:\n      - store-network\n\n  kafka:\n    # \u00bfQu\u00e9 es? Imagen de Kafka de Confluent (empresa que mantiene Kafka)\n    image: confluentinc/cp-kafka:latest\n    container_name: store-kafka\n\n    environment:\n      # \u00bfD\u00f3nde est\u00e1 Zookeeper? (Kafka necesita esta info)\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n\n      # \u00bfC\u00f3mo anunciar la direcci\u00f3n? Clientes se conectan a localhost:9092\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n\n      # \u00bfCu\u00e1ntas r\u00e9plicas? 1 para desarrollo (normalmente 3 en producci\u00f3n)\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n\n      # \u00bfCrear t\u00f3picos autom\u00e1ticamente? S\u00ed, para facilitar desarrollo\n      KAFKA_AUTO_CREATE_TOPICS_ENABLE: \"true\"\n\n    ports:\n      - \"9092:9092\"    # Puerto est\u00e1ndar de Kafka\n\n    # \u00bfOrden de inicio? Kafka necesita que Zookeeper est\u00e9 listo primero\n    depends_on:\n      - zookeeper\n\n    healthcheck:\n      # \u00bfC\u00f3mo verificar? Listar t\u00f3picos (si funciona, Kafka est\u00e1 listo)\n      test: [\"CMD\", \"kafka-topics\", \"--bootstrap-server\", \"localhost:9092\", \"--list\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    networks:\n      - store-network\n\n  # =====================================\n  # APLICACI\u00d3N PRINCIPAL\n  # =====================================\n  app:\n    # \u00bfDe d\u00f3nde viene? Se construye con task build:image\n    image: store-cqrs:latest\n    container_name: store-app\n\n    # \u00bfOrden de inicio? App necesita que todos los servicios est\u00e9n listos\n    depends_on:\n      postgres:\n        condition: service_healthy    # Espera hasta que PostgreSQL responda\n      zipkin:\n        condition: service_healthy    # Espera hasta que Zipkin responda  \n      kafka:\n        condition: service_healthy    # Espera hasta que Kafka responda\n\n    # \u00bfConfiguraci\u00f3n? Variables que Spring Boot lee al iniciar\n    environment:\n      # \u00bfQu\u00e9 profile? 'docker' tiene configuraci\u00f3n espec\u00edfica para contenedores\n      SPRING_PROFILES_ACTIVE: docker\n\n      # \u00bfBase de datos? 'postgres' = nombre del servicio, no 'localhost'\n      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/store_db\n      SPRING_DATASOURCE_USERNAME: store_user\n      SPRING_DATASOURCE_PASSWORD: store_password\n\n      # \u00bfZipkin? 'zipkin' = nombre del servicio en la red de Docker\n      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans\n\n      # \u00bfKafka? 'kafka' = nombre del servicio  \n      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n\n    ports:\n      - \"8080:8080\"    # Aplicaci\u00f3n accesible en localhost:8080\n\n    healthcheck:\n      # \u00bfEst\u00e1 lista? Verificar endpoint de salud de Spring Boot\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/actuator/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n      start_period: 60s    # Esperar 60s antes del primer check (app tarda en iniciar)\n    networks:\n      - store-network\n\n# =====================================\n# ALMACENAMIENTO PERSISTENTE\n# =====================================\nvolumes:\n  postgres_data:\n    # \u00bfQu\u00e9 es? Volumen administrado por Docker\n    # \u00bfPara qu\u00e9? Los datos de PostgreSQL sobreviven al borrar contenedores\n    driver: local\n\n# =====================================\n# REDES\n# =====================================\nnetworks:\n  store-network:\n    # \u00bfQu\u00e9 tipo? Bridge = red local donde contenedores se ven entre s\u00ed\n    # \u00bfPor qu\u00e9? 'app' puede conectarse a 'postgres' por nombre\n    driver: bridge\n</code></pre>"},{"location":"spring_modulith_part_3/#profile-especifico-para-docker","title":"Profile Espec\u00edfico para Docker","text":"<p>Crea <code>src/main/resources/application-docker.yml</code>:</p> <pre><code># application-docker.yml\n# \u00bfPara qu\u00e9? Configuraci\u00f3n espec\u00edfica cuando app corre en contenedor\n\nspring:\n  datasource:\n    # \u00bfPor qu\u00e9 'postgres'? En Docker, servicios se conectan por nombre\n    url: jdbc:postgresql://postgres:5432/store_db\n    username: store_user\n    password: store_password\n\n  kafka:\n    # \u00bfPor qu\u00e9 'kafka'? Nombre del servicio en docker-compose.yml\n    bootstrap-servers: kafka:9092\n\nmanagement:\n  zipkin:\n    tracing:\n      # \u00bfPor qu\u00e9 'zipkin'? Nombre del servicio en la red de Docker\n      endpoint: http://zipkin:9411/api/v2/spans\n\nlogging:\n  level:\n    # \u00bfPor qu\u00e9 INFO? En contenedores queremos menos logs\n    com.example.store: INFO\n</code></pre>"},{"location":"spring_modulith_part_3/#demo-final","title":"Demo Final","text":""},{"location":"spring_modulith_part_3/#que-incluye-el-demo","title":"\u00bfQu\u00e9 Incluye el Demo?","text":"<p>El demo muestra el flujo completo: 1. Crear producto \u2192 Ver evento interno + externo 2. Agregar review \u2192 Ver actualizaci\u00f3n de vista + Kafka 3. Verificar trazabilidad \u2192 Zipkin muestra el flujo 4. Validar m\u00f3dulos \u2192 Endpoint de arquitectura</p>"},{"location":"spring_modulith_part_3/#comandos-del-demo","title":"Comandos del Demo","text":"<pre><code># 1. Demo completo automatizado\ntask demo\n\n# Lo que hace internamente:\n# - task build:image (construye app)\n# - docker compose up (inicia todo)\n# - Espera servicios listos\n# - Muestra URLs importantes\n</code></pre>"},{"location":"spring_modulith_part_3/#apis-para-probar-manualmente","title":"APIs para Probar Manualmente","text":"<pre><code># 1. Crear producto\ncurl -X POST http://localhost:8080/api/products \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"iPhone 15 Pro\",\n    \"description\": \"Latest iPhone model\",\n    \"price\": 999.99,\n    \"stock\": 50,\n    \"category\": \"Electronics\"\n  }'\n\n# Respuesta esperada:\n# {\"id\": \"550e8400-e29b-41d4-a716-446655440000\"}\n\n# 2. Ver todos los productos\ncurl http://localhost:8080/api/products\n\n# 3. Agregar review (reemplaza {id} con el ID real)\ncurl -X POST http://localhost:8080/api/products/{id}/reviews \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"vote\": 5,\n    \"comment\": \"Excelente producto!\"\n  }'\n\n# 4. Ver productos ordenados por rating\ncurl http://localhost:8080/api/products/by-rating\n</code></pre>"},{"location":"spring_modulith_part_3/#que-verificar-en-el-demo","title":"\u00bfQu\u00e9 Verificar en el Demo?","text":""},{"location":"spring_modulith_part_3/#1-aplicacion-funcionando","title":"1. Aplicaci\u00f3n Funcionando","text":"<pre><code># Health check\ncurl http://localhost:8080/actuator/health\n\n# Debe devolver:\n{\n  \"status\": \"UP\",\n  \"components\": {\n    \"db\": {\"status\": \"UP\"},\n    \"kafka\": {\"status\": \"UP\"}\n  }\n}\n</code></pre>"},{"location":"spring_modulith_part_3/#2-informacion-de-modulos","title":"2. Informaci\u00f3n de M\u00f3dulos","text":"<pre><code># Ver estructura modular\ncurl http://localhost:8080/actuator/modulith\n\n# Debe mostrar:\n{\n  \"modules\": [\n    {\"name\": \"products\", \"dependencies\": [\"common\"]},\n    {\"name\": \"common\", \"dependencies\": []}\n  ],\n  \"violations\": []  # \u2190 \u00a1Importante! Sin violaciones\n}\n</code></pre>"},{"location":"spring_modulith_part_3/#3-trazabilidad-en-zipkin","title":"3. Trazabilidad en Zipkin","text":"<ul> <li>URL: http://localhost:9411</li> <li>Qu\u00e9 buscar: Trazas que muestran:   <pre><code>POST /api/products\n\u251c\u2500 ProductCommandService.createProduct\n\u251c\u2500 ProductRepository.save\n\u251c\u2500 ApplicationEventPublisher.publishEvent\n\u2514\u2500 ProductEventHandler.on (async)\n</code></pre></li> </ul>"},{"location":"spring_modulith_part_3/#4-eventos-en-kafka","title":"4. Eventos en Kafka","text":"<pre><code># Ver t\u00f3picos creados\ndocker exec store-kafka kafka-topics --bootstrap-server localhost:9092 --list\n\n# Debe mostrar:\n# products.created\n# products.reviewed\n\n# Consumir eventos (para ver qu\u00e9 se envi\u00f3)\ndocker exec store-kafka kafka-console-consumer \\\n  --bootstrap-server localhost:9092 \\\n  --topic products.created \\\n  --from-beginning\n\n# Debe mostrar eventos JSON:\n# {\"id\":\"123\",\"name\":\"iPhone 15 Pro\",...}\n</code></pre>"},{"location":"spring_modulith_part_3/#urls-del-demo","title":"URLs del Demo","text":"<p>Despu\u00e9s de <code>task demo</code>, estos endpoints est\u00e1n disponibles:</p> <ul> <li>\ud83c\udf10 Aplicaci\u00f3n: http://localhost:8080</li> <li>\u2764\ufe0f Health Check: http://localhost:8080/actuator/health  </li> <li>\ud83d\uddc2\ufe0f Informaci\u00f3n de M\u00f3dulos: http://localhost:8080/actuator/modulith</li> <li>\ud83d\udcca Trazas Zipkin: http://localhost:9411</li> </ul>"},{"location":"spring_modulith_part_3/#limpieza-del-demo","title":"Limpieza del Demo","text":"<pre><code># Detener demo (mantiene datos)\ntask demo:stop\n\n# Limpiar completamente (borra datos)\ntask demo:clean\n</code></pre>"},{"location":"spring_modulith_part_3/#conclusion-del-workshop","title":"Conclusi\u00f3n del Workshop","text":""},{"location":"spring_modulith_part_3/#que-hemos-logrado","title":"\u00bfQu\u00e9 Hemos Logrado?","text":"<p>\u2705 Modularidad sin Complejidad - M\u00f3dulos independientes dentro de un monolito - Reglas arquitect\u00f3nicas autom\u00e1ticas - Testing independiente por m\u00f3dulo</p> <p>\u2705 CQRS Funcional - Separaci\u00f3n clara comandos vs queries - Modelos optimizados para cada lado - Sincronizaci\u00f3n autom\u00e1tica v\u00eda eventos</p> <p>\u2705 Observabilidad Completa - Trazabilidad como en microservicios - Informaci\u00f3n de m\u00f3dulos en tiempo real - Debugging simplificado</p> <p>\u2705 Integraci\u00f3n Externa - Eventos a Kafka para otros sistemas - Bajo acoplamiento entre aplicaciones - Escalabilidad futura</p> <p>\u2705 Automatizaci\u00f3n Total - Un comando inicia todo el entorno - Docker garantiza consistencia - Deployment simplificado</p>"},{"location":"spring_modulith_part_3/#cuando-usar-spring-modulith","title":"\u00bfCu\u00e1ndo Usar Spring Modulith?","text":"<p>\ud83d\udc4d Ideal para: - Equipos de 2-10 desarrolladores - Aplicaciones con dominios claros - Necesidad de desarrollo r\u00e1pido - Infraestructura limitada - Monolitos existentes que mejorar</p> <p>\ud83d\udc4e No ideal para: - Equipos muy grandes (&gt;20 personas) - Dominios completamente independientes - Requisitos de escalado muy espec\u00edficos - Tecnolog\u00edas muy diferentes por \u00e1rea</p>"},{"location":"spring_modulith_part_3/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<ol> <li>Practicar: Implementa m\u00e1s m\u00f3dulos (<code>orders</code>, <code>inventory</code>)</li> <li>Profundizar: Event Sourcing, Sagas, CQRS avanzado</li> <li>Optimizar: Cache, performance, \u00edndices BD</li> <li>Migrar: Cuando llegue el momento, extraer m\u00f3dulos a microservicios</li> </ol>"},{"location":"spring_modulith_part_3/#evolucion-gradual","title":"Evoluci\u00f3n Gradual","text":"<p>Fase 1: Monolito Modular (donde estamos ahora) - M\u00f3dulos claros - Eventos internos - Testing independiente</p> <p>Fase 2: H\u00edbrido (cuando sea necesario) - Algunos m\u00f3dulos extra\u00eddos - Comunicaci\u00f3n v\u00eda Kafka - Bases de datos separadas</p> <p>Fase 3: Microservicios (solo si es necesario) - Servicios completamente independientes - Infraestructura compleja - Equipos especializados</p>"},{"location":"spring_modulith_part_3/#comandos-de-referencia-rapida","title":"Comandos de Referencia R\u00e1pida","text":"<pre><code># Desarrollo diario\ntask                    # Tests completos\ntask dev               # Entorno de desarrollo\ntask test:modulith     # Solo verificar arquitectura\n\n# Demo y deployment  \ntask demo              # Demo completo\ntask build:image       # Construir imagen Docker\ntask infra:start       # Solo servicios base\n\n# Limpieza\ntask demo:clean        # Limpiar demo\ntask infra:clean       # Limpiar infraestructura\n</code></pre> <p>Recuerda: No hay arquitectura perfecta, solo arquitectura adecuada para tu contexto actual.</p> <p>Spring Modulith te da la flexibilidad de empezar simple y evolucionar seg\u00fan tus necesidades reales, no seg\u00fan las modas tecnol\u00f3gicas.</p> <p>\u00a1Feliz codificaci\u00f3n! \ud83c\udf89</p>"}]}